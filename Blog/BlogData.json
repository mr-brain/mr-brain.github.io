[{"RelFilename":"2016\\05\\setting-up-visual-studio-code.md","Title":"## Setting up a TypeScript + Visual Studio Code development environment","CreateTime":"2016-05-28T22:55:35.6094345","Content":"* Download and installing Visual Studio Code\r\n* Download node.js\r\n\r\nOpen VS Code when you are ready and use Shift + Command + p to access the command panel.\r\nGo ahead and type \"install extensions\": and type\r\n\r\n\ttslint\r\n\t\r\ngo to node.js cmd\r\n\r\n\tnpm install -g tslint\r\n\t\r\ninstall VS code extensions\r\n\r\n\tWallaby.js\r\n\t\r\n---\r\n\r\nCreate a new folder for your project and create a new package.json file:\r\n\r\n$ mkdir ts-vscode-boilerplate\r\n$ cd ts-vscode-boilerplate\r\n$ npm init\r\n\r\nWe are now ready to install the third party dependencies:\r\n\r\n\tnpm install  --save-dev browser-sync\r\n\tnpm install  --save-dev browserify\r\n\tnpm install  --save-dev chai\r\n\tnpm install  --save-dev gulp\r\n\tnpm install  --save-dev gulp-istanbul\r\n\tnpm install  --save-dev gulp-mocha\r\n\tnpm install  --save-dev gulp-sourcemaps\r\n\tnpm install  --save-dev gulp-tslint\r\n\tnpm install  --save-dev gulp-typescript\r\n\tnpm install  --save-dev gulp-uglify\r\n\tnpm install  --save-dev run-sequence\r\n\tnpm install  --save-dev tslint\r\n\tnpm install  --save-dev typescript\r\n\tnpm install  --save-dev vinyl-buffer\r\n\tnpm install  --save-dev vinyl-source-stream\r\n\t\r\nConfiguring your VS Code preferences\r\nClick on 「Workspace Settings」. Two files should be displayed on screen:\r\n\r\n \r\n"},{"RelFilename":"2016\\05\\develop-electron-app.md","Title":"Develop Electron App","CreateTime":"2016-05-28T19:40:16.2267619","Content":"\r\n* Download node.js v4.4.5 LTS msi version from [nodejs.org website](https://nodejs.org/en/download/)\r\n* Download python 2.7.1 from [python.org website](https://www.python.org/downloads/windows/)\r\n\r\n\tset system environment path PYTHON=\"C:\\Python27\\python.exe\"\r\n\t\r\n\r\n* Install [Visual Studio Community 2015](https://www.visualstudio.com/zh-tw/products/visual-studio-community-vs.aspx)\r\n\t\r\n\tVisual C++ -> \r\n\t\tVisual C++ 2015\r\n\tCommon Windows Application Develop Tool -> \r\n\t\tTool (1.2) & Windows 10 SDK (10.0.10586)\r\n\t\tWindows 10 SDK (10.0.10586)\r\n\r\nEnter cmd.exe\r\n\r\n\t$npm config set msvs_version 2015 --global\r\n\t\r\n\tThe above can avoid the following parameters for each installation\r\n\tnpm install [package name] --msvs_version=2015\r\n\r\n\t$npm install electron-prebuilt --save\r\n\t\r\n\r\nEach development new Electron App, first create folder C:\\sample-app1, and cmd c:\\sample-app1\r\n\r\n\tsample-app1/\r\n\t\t├── package.json\r\n\t\t├── main.js\r\n\t\t├── webpack.config.js\r\n\t\t└── app/\r\n\t\t\t├── mainWindow.html\r\n\t\t\t└── mainWindow.jsx\r\n\r\n* Create package.json file\r\n\r\n\t{\r\n\t\t\"name\": \"electron-example\",\r\n\t\t\"version\": \"0.1.0\",\r\n\t\t\"main\": \"main.js\"\r\n\t}\r\n\t\r\nPS：If package.json Not specified main field，Electron default use index.js file.\r\n\r\nmain.js \r\n\t'use strict';\r\n\r\n\tconst electron = require('electron');\r\n\t// app: Control application lifecycle module\r\n\tconst app = electron.app;\r\n\r\n\t// BrowserWindow: Create a native window module\r\n\tconst BrowserWindow = electron.BrowserWindow;\r\n\r\n\t// Reserve a global object to avoid JavaScript object GC resulting window automatically closes\r\n\tlet mainWindow;\r\n\r\n\tfunction createWindow () {\r\n\t\t// Create browser window\r\n\t\tmainWindow = new BrowserWindow({width: 800, height: 600});\r\n\r\n\t\t// Load mainWindow.html for view\r\n\t\tmainWindow.loadURL('file://' + __dirname + '/app/mainWindow.html');\r\n\r\n\t\t// Open Developer Tools\r\n\t\tmainWindow.webContents.openDevTools();\r\n\r\n\t\t// When browser window closed，will send 'closed' signal，and run callback\r\n\t\tmainWindow.on('closed', function() {\r\n\t\t\tmainWindow = null;\r\n\t\t});\r\n\t}\r\n\r\n\t// When Electron initialization is completed and begin establish the new window，\r\n\t// will send 'ready' signal，and run callback\r\n\tapp.on('ready', createWindow);\r\n\r\n\t// app quit\r\n\tapp.on('window-all-closed', function () {\r\n\t\t// For OSX User platform, force user press Cmd + Q\r\n\t\tif (process.platform !== 'darwin') {\r\n\t\t\tapp.quit();\r\n\t\t}\r\n\t});\r\n\r\n\tapp.on('activate', function () {\r\n\t\t// For OSX\r\n\t\tif (mainWindow === null) {\r\n\t\t\tcreateWindow();\r\n\t\t}\r\n\t});\r\n\t\r\napp/mainWindow.html is show window view\r\n\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t<head>\r\n\t\t<meta charset=\"UTF-8\">\r\n\t\t<title>My Electron-React app</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"content\">\r\n\t\t\tHello World!!\r\n\t\t</div>\r\n\t</body>\r\n\t</html>\r\n\r\nIn sample-app1 Folder, install package \t\r\n\r\n\t$npm install electron-prebuilt\r\n\r\n\r\nRun\r\n\t\r\n\t$ node_modules/.bin/electron .\r\n\r\n\tSecond parameter is: package.json Folder path \r\n\t\r\n\t\r\n\t\r\n---\r\n\r\n\r\n\t\r\n\t\r\nRun webpack to generate new app/built/mainWindow.js file\r\n\r\n\t$ ./node_modules/.bin/webpack\r\n\t\r\n\t\r\nStart Run\r\n\t\r\n\t$ node_modules\\.bin\\electron .\r\n\r\n\r\nIn order to facilitate future easy to use，we will put instructions into package.json , \r\n\r\n\t\"scripts\": {\r\n\t\t\"start\": \"./node_modules/.bin/electron ./\",\r\n\t\t\"electron-rebuild\": \"./node_modules/.bin/electron-rebuild\",\r\n\t\t\"webpack\": \"./node_modules/.bin/webpack\"\r\n\t}\r\n\r\nAfter only need to run\r\n\r\n\t$ npm run webpack && npm start"},{"RelFilename":"2016\\04\\integrating-gulp-into-vs-net.md","Title":"Integrating gulp into VS.NET","CreateTime":"2016-04-21T15:26:59.9672937","Content":"\r\n\t$npm install -g gulp\r\n\r\n\t$npm install gulp-autoprefixer --save-dev\r\n\r\nCreate gulpfile.js file in root project path folder\r\n\r\n\r\n**EXTENDING OUR .CSPROJ WITH CUSTOM TARGETS**\r\n\r\nManually edit your .csproj file and at the bottom (must be after all Import lines) we're going to add some new content.\r\n\r\n\t<PropertyGroup>\r\n\t  <CompileDependsOn>\r\n\t    $(CompileDependsOn);\r\n\t    GulpBuild;\r\n\t  </CompileDependsOn>\r\n\t</PropertyGroup>\r\n\t<Target Name=\"GulpBuild\" DependsOnTargets=\"CompileTypeScript\">\r\n\t  <Exec Command=\"npm install\" />\r\n\t  <Exec Command=\"gulp\" />\r\n\t</Target>\r\n\r\n\r\nWhat about triggering a gulp cleanup script when we clean our solution in Visual Studio?  It's a very similar extension:\r\n\r\n\r\n\t<PropertyGroup>\r\n\t  <CleanDependsOn>\r\n\t    $(CleanDependsOn);\r\n\t    GulpClean\r\n\t  </CleanDependsOn>\r\n\t</PropertyGroup>\r\n\t<Target Name=\"GulpClean\">\r\n\t  <Exec Command=\"gulp clean\" />\r\n\t</Target>\r\n\r\n\r\nHOOKING INTO WEB DEPLOY\r\n\r\n\t<PropertyGroup>\r\n\t  <CopyAllFilesToSingleFolderForPackageDependsOn>\r\n\t    $(CopyAllFilesToSingleFolderForPackageDependsOn);\r\n\t    CollectGulpOutput;\r\n\t  </CopyAllFilesToSingleFolderForPackageDependsOn>\r\n\t  <CopyAllFilesToSingleFolderForMsdeployDependsOn>\r\n\t    $(CopyAllFilesToSingleFolderForMsdeployDependsOn);\r\n\t    CollectGulpOutput;\r\n\t  </CopyAllFilesToSingleFolderForMsdeployDependsOn>\r\n\t</PropertyGroup>\r\n\t<Target Name=\"CollectGulpOutput\">\r\n\t  <ItemGroup>\r\n\t    <_CustomFiles Include=\"build\\**\\*\" />\r\n\t    <FilesForPackagingFromProject Include=\"%(_CustomFiles.Identity)\">\r\n\t      <DestinationRelativePath>build\\%(RecursiveDir)%(Filename)%(Extension)</DestinationRelativePath>\r\n\t    </FilesForPackagingFromProject>\r\n\t  </ItemGroup>\r\n\t  <Message Text=\"CollectGulpOutput list: %(_CustomFiles.Identity)\" />\r\n\t</Target>"},{"RelFilename":"2016\\04\\how-to-encode-space-path-in-msbuild.md","Title":"How to encode space path in MSBuild?","CreateTime":"2016-04-14T13:13:57.5558749","Content":"\r\nI'm using the property MSBuildProjectDirectory with MSBuild.\r\nThe project is located in:\r\n\r\n\tC:\\Program Files (x86)\\Jenkins\\workspace\\MyProject\r\n\r\n\r\nand MSBuild will get a \"The system cannot find the file specified\" error.\r\n\r\nplease instead of\r\n\r\n\t$([MSBuild]::Unescape('$(MSBuildProjectDirectory)'))"},{"RelFilename":"2016\\04\\minify-javascript-in-vsnet.md","Title":"how do I minify Javascript and CSS in the vs.net 2013 post-build step ","CreateTime":"2016-04-13T15:15:59.3360561","Content":"\r\n\r\nWant Ajax Minifier to be packaged with your project? From the Ajax Minifier install folder, you can move AjaxMin.dll and AjaxMinTask.dll directly into your source directory. I put them in my App_Data folder. Once they're somewhere in your source, in Visual Studio right-click them, select Include in Project, and also change their Build Action property to None.\r\n\r\nThen in the code I included above, change\r\n\r\n\t<Import Project=\"$(MSBuildExtensionsPath)\\Microsoft\\Microsoft Ajax Minifier\\ajaxmin.tasks\" />\r\n to\r\n\r\n\t<UsingTask TaskName=\"AjaxMin\" AssemblyFile=\"$(MSBuildProjectDirectory)\\App_Data\\AjaxMinTask.dll\" />\r\n\r\n Done.\r\n\r\n\r\n\t\r\n\t<UsingTask TaskName=\"AjaxMin\" AssemblyFile=\"$(MSBuildProjectDirectory)\\DLL\\AjaxMinTask.dll\" />\r\n\t  <Target Name=\"AfterBuild\" Condition=\"'$(ConfigurationName)'=='Debug'\">\r\n\t    <ItemGroup>\r\n\t      <JS Include=\"app\\**\\*.js\" Exclude=\"**\\*.min.js;obj\\**\\*.*\" />\r\n\t      <CSS Include=\"app\\**\\*.css\" Exclude=\"**\\*.min.css;obj\\**\\*.*\" />\r\n\t    </ItemGroup>\r\n\t    <AjaxMin JsSourceFiles=\"@(JS)\" JsSourceExtensionPattern=\"\\.js$\" JsTargetExtension=\"-min.js\" CssSourceFiles=\"@(CSS)\" CssSourceExtensionPattern=\"\\.css$\" CssTargetExtension=\"-min.css\" />\r\n\t  </Target>\r\n\t  <PropertyGroup>\r\n\t    <CopyAllFilesToSingleFolderForPackageDependsOn>\r\n\t\t\tCustomCollectFiles;\r\n\t\t\t$(CopyAllFilesToSingleFolderForPackageDependsOn);\r\n\t\t  </CopyAllFilesToSingleFolderForPackageDependsOn>\r\n\t  </PropertyGroup>\r\n\t  <Target Name=\"CustomCollectFiles\">\r\n\t    <ItemGroup>\r\n\t      <MinJS Include=\"**\\*.jsMIN\" />\r\n\t      <FilesForPackagingFromProject Include=\"%(MinJS.Identity)\">\r\n\t        <DestinationRelativePath>%(RecursiveDir)%(Filename).js</DestinationRelativePath>\r\n\t      </FilesForPackagingFromProject>\r\n\t      <MinCSS Include=\"**\\*.cssMIN\" />\r\n\t      <FilesForPackagingFromProject Include=\"%(MinCSS.Identity)\">\r\n\t        <DestinationRelativePath>%(RecursiveDir)%(Filename).css</DestinationRelativePath>\r\n\t      </FilesForPackagingFromProject>\r\n\t    </ItemGroup>\r\n\t  </Target>"},{"RelFilename":"2016\\04\\create-electron-develop-environment.md","Title":"create electron develop environment","CreateTime":"2016-04-10T16:21:07.0664934","Content":"\r\ninstall [node.js](https://nodejs.org/en/download/)\r\ninstall [python 2.x]()\r\n\r\n\r\n\tnpm config set msvs_version 2015 --global\r\n\r\nIt must avoid each installation, for example:\r\n\r\n\tnpm install [package name] --msvs_version=2015\r\n\r\ninstall electron-prebuilt \r\n \r\n\tnpm install electron-prebuilt --save\r\n\r\n\r\nour application file system：\r\n\r\n\tyour-app/\r\n\t\t├── package.json\r\n\t\t├── app.js\r\n\t\t├── webpack.config.js\r\n\t\t└── app/\r\n        \t├── main.html\r\n\t        └── main.jsx\r\n\r\nrun sample\r\n\r\n\t./node_modules/.bin/electron .\r\n\r\n\r\nyou can pack your application\r\n\r\n\tnpm i electron-packager\r\n\r\nmodify package.json file\r\n\r\n\t\"scripts\": {\r\n\t    \"start\": \"electron .\",\r\n\t    \"build\": \"electron-packager . MyFirstApp --ignore=node_modules/electron-* --platform=win32 --arch=x64 --version=0.32.3\"\r\n\t}\r\n\r\nand run\r\n\r\n\tnpm run build\r\n\r\nand use asar \r\n\r\n\tnpm i asar\r\n\r\nmodify package.json file\r\n\r\n\t\"scripts\": {\r\n\t    \"start\": \"electron .\",\r\n\t    \"build\": \"electron-packager . MyFirstApp --ignore=node_modules/electron-* --platform=win32 --arch=x64 --version=0.32.3\",\r\n\t    \"package\": \"asar pack MyFirstApp-win32-x64/resources/app MyFirstApp-win32-x64/resources/app.asar && rm -rf MyFirstApp-win32-x64/resources/app\"\r\n\t}\r\n\r\nrun package\r\n\r\n\tnpm run package\r\n\r\n\r\ninstall webpack\r\n\r\n\tnpm install webpack --save\r\n\tnpm insall webpack-target-electron-renderer --save\r\n\r\n"},{"RelFilename":"2016\\04\\install-net-core.md","Title":"Install .NET Core 1.0","CreateTime":"2016-04-06T12:31:43.0948621","Content":"\r\nThe best way to install .NET Core on Windows is to download the [official MSI installer](https://dotnetcli.blob.core.windows.net/dotnet/beta/Installers/1.0.0.001598/dotnet-win-x64.1.0.0.001598.exe). This installer will install the tools and put them on your PATH.\r\n\r\nIf you are using Windows 7, Windows Server 2008 or Windows Server 2012 you will also need to install Visual C++ Redistributable for [Visual Studio 2012 Update 4](https://www.microsoft.com/en-us/download/confirmation.aspx?id=30679) & [Visual C++ Redistributable for Visual Studio 2015](https://www.microsoft.com/en-us/download/details.aspx?id=48145) .\r\n\r\n\r\nInitialize some code for console application\r\n\r\n\tC:\\>mkdir hwapp\r\n\tC:\\>cd hwapp\r\n\tC:\\>dotnet new\r\n\r\nThe first command will restore the packages specified in the project.json file, and the second command will run the actual sample:\r\n\r\n\tC:\\>dotnet restore\r\n\tC:\\>dotnet run\r\n\r\nupdate npm\r\n\r\n\tnpm install -g npm\r\n\r\nInitialize yo\r\n\r\n\tnpm install -g yo\r\n\tnpm install -g generator-webapp\r\n\tnpm install -g generator-aspnet\r\n\r\n\r\nTo scaffold a new aspnet project, run:\r\n\r\n\tyo aspnet\r\n\r\n![yo-aspnet](install-net-core\\yo-aspnet.png)\r\n\r\n\r\nNow lets create using Visual Studio yo extension, [install yo extension first](https://marketplace.visualstudio.com/items?itemName=samverschueren.yo).\r\n\r\n\r\nIntellisense Key Bindings for Visual Studio Code\r\n\r\n|\r\n|Key\t|Command\t|Command id\r\n|Ctrl+Space\t|Trigger Suggest\t|editor.action.triggerSuggest\r\n\r\n\r\nAdd Static Files packages and restore \"project.json\"\r\n\r\n\t\"dependencies\": {\r\n\t\t...,\r\n\t\t\"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-final\"\r\n\t}\r\n\r\nFrom the Command Palette in VS Code\r\n\r\n\tdotnet restore\r\n\r\n"},{"RelFilename":"2016\\04\\install-aspnet5-dotnet-core1.md","Title":"Install ASP.NET 5 (.NET Core 1)","CreateTime":"2016-04-05T14:02:12.5203257","Content":"\r\nInstall [ASP.NET 5](https://go.microsoft.com/fwlink/?LinkId=627627)\r\n\r\nEnable the ASP.NET 5 command-line tools. Open a command-prompt and run:\r\n\r\n\tdnvm upgrade\r\n\r\nThis will make the default .NET Execution Environment (DNX) active on the path.\r\n\r\nOn Windows 7 and Windows Server 2008 R2 you will also need to install the [Visual C++ Redistributable for Visual Studio 2012 Update 4.](https://www.microsoft.com/en-us/download/confirmation.aspx?id=30679)\r\n\r\n\r\n\t@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"&{$Branch='dev';iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.ps1'))}\"\r\n\r\n\r\nOnce this step is complete you should be able to run dnvm and see some help text.\r\n\r\n\r\n\r\nUse DNVM to install DNX for .NET Core:\r\n\r\n\tdnvm upgrade -r coreclr\r\n\r\nUse DNVM to install DNX for the full .NET Framework:\r\n\r\n\tdnvm upgrade -r clr\r\n\r\n\r\nInstall the requested DNX version from the feed, create console application using .NET Core\r\n\r\n\tdnvm install -a x64 -r coreclr 1.0.0-rc1-final\r\n\r\n\r\n\r\nInstall generator \r\n\r\n\tnpm install -g yo generator-aspnet\r\n\r\nCreate Develop folder and generate console project\r\n\r\n\tyo aspnet\r\n\r\n"},{"RelFilename":"2016\\04\\install-git-server-on-windows.md","Title":"Install Git Server on Windows","CreateTime":"2016-04-01T10:21:24.5580654","Content":"\r\nDownload \"Git 2.8.0 for Windows\" from [git-scm site](https://git-scm.com/) \r\nDownload Bitvise SSH Server (WinSSHD) 6.45 from [bitvise](https://www.bitvise.com/download-area)\r\n\r\n\r\nInstall Git for windows and setup login account\r\n\r\n![install git](install-git-server-on-windows/install-git.png)\r\n\r\n\r\nCreate Git Repos Root Folder\r\n\r\n\tD:/Demo/GitRepos\r\n\r\nCreate test folder and open bash command \r\n\r\n\tC:/User/vdevp/GitRepos>md test\r\n\t\r\n![git-bash-here](install-git-server-on-windows/git-bash-here.png)\r\n\r\n\tvdevp@vdevp-PC MINGW64 /c/User/vdevp/GitRepos/test\r\n\t$ git init --bare\r\n\r\nGit will create many initialize files\r\n\r\n![git-init](install-git-server-on-windows/git-init.png)\r\n\r\n\r\nGo to your client PC and create test folder \r\n\r\n\tD:/Demo/test\r\n\r\nopen Git bash command\r\n\r\n\t$ git clone ssh://vdevp@192.168.2.3/~/GitRepos/test\r\n\tCloning into 'test'...\r\n\tvdevp@192.168.2.3's password:\r\n\t'git-upload-pack' is not recognized as an internal or external command, operable program or batch file.\r\n\tfatal: Could not read from remote repository.\r\n\r\n\tPlease make sure you have the correct access rights and the repository exists.\r\n\t\r\n\r\nIf you see the error message, please go to Server add system PATH environment \r\n\r\n\tC:\\Program Files (x86)\\Git\\bin;C:\\Program Files\\Git\\mingw64\\libexec\\git-core\r\n\r\n\r\n\r\n\r\n"},{"RelFilename":"2016\\03\\visual-studio-code-setup.md","Title":"Setting up TypeScript + Visual Studio Code development environment","CreateTime":"2016-03-31T10:33:58.4377455","Content":"\r\n\r\nLet's get started!\r\n\r\n* Download and installing [Visual Studio Code](https://code.visualstudio.com/)\r\n* Download and installing [node.js 4.4.1](https://nodejs.org/en/download/)\r\n\r\nLet's now install some VS code extensions.\r\nOpen VS Code when you are ready and use Shift + Ctrl + p\r\nto access command panel.\r\n\r\ntype \"install extensions\"\r\n\r\n![install-extensions](visual-studio-code-setup/install-extensions.png)\r\n\r\n\text install tslin\r\n\r\n\r\nNote The tslint extension requires a global installation of tslint:\r\n\r\n\tnpm install -g tslint\r\n\r\n\r\nthen restart VS Code\r\n\r\n\text install Wallaby.js\r\n\r\n\r\n\t>mkdir ts-vscode-boilerplate\r\n\t>cd ts-vscode-boilerplate\r\n\t>npm init\r\n\r\nWe are now ready to install the third party dependencies:\r\n\r\n\t$ npm install  --save-dev browser-sync\r\n\t$ npm install  --save-dev browserify\r\n\t$ npm install  --save-dev chai\r\n\t$ npm install  --save-dev gulp\r\n\t$ npm install  --save-dev gulp-istanbul\r\n\t$ npm install  --save-dev gulp-mocha\r\n\t$ npm install  --save-dev gulp-sourcemaps\r\n\t$ npm install  --save-dev gulp-tslint\r\n\t$ npm install  --save-dev gulp-typescript\r\n\t$ npm install  --save-dev gulp-uglify\r\n\t$ npm install  --save-dev run-sequence\r\n\t$ npm install  --save-dev tslint\r\n\t$ npm install  --save-dev typescript\r\n\t$ npm install  --save-dev vinyl-buffer\r\n\t$ npm install  --save-dev vinyl-source-stream\r\n\r\n\r\nOpen VS Code and Click preferences -> “Workspace Settings”. \r\n\r\n"},{"RelFilename":"2016\\03\\t1-tinyioc-example.md","Title":"T1.TinyIoc Example","CreateTime":"2016-03-25T20:22:45.199608","Content":"\r\n[T1.Scripts Nuget page 0.1.0.11](https://www.nuget.org/packages/T1.Scripts/)\r\n\r\nThe following code is using t1.TinyIoc example\r\n\r\n\timport t1 require(\"t1\");\r\n\tclass IMyKlass implements t1.IIocInterfaceChecker {\r\n\t\tclassName: string = \"IMyKlass\";\r\n\t\ttest(): number {\r\n\t\t\tthrow new Error(\"Not implement\");\r\n\t\t}\r\n\t}\r\n\r\n\tclass MyKlass extends IMyKlass {\r\n\t\ttest(): number {\r\n\t\t\treturn 123;\r\n\t\t}\r\n\t}\r\n\r\n\tt1.TinyIoc.registerType(IMyKlass, MyKlass);\r\n\r\n\tvar obj: IMyKlass = Ioc.resolve(IMyKlass);\r\n\tvar val = obj.test();\r\n\texpect(val).toBe(123);\r\n\r\nIf you need global instance\r\n\r\n\tt1.TinyIoc.registerInstance(IMyKlass, new MyKlass());\r\n\r\nYou can even\r\n\r\n\tt1.TinyIoc.registerLazy(IMyKlass, () => new MyKlass());\r\n\r\n"},{"RelFilename":"2016\\03\\odds-convert-table.md","Title":"Odds convert table","CreateTime":"2016-03-15T22:36:16.2384229","Content":"\r\n<iframe src=\"/Source/odds-convert-table.html\" width=480 height=740 frameborder=0>\r\n</iframe>\r\n\r\n\r\n\r\n\r\n"},{"RelFilename":"2016\\03\\create-custom-iis-url-rewrite-provider.md","Title":"Create Custom IIS URL Rewrite Provider","CreateTime":"2016-03-13T11:03:35.3589532","Content":"\r\n\r\nDeveloping a Custom Rewrite Provider for URL Rewrite Module\r\n\r\n### Creating a Visual Studio C# Class Library Project\r\n* add references to Microsoft.Web.Iis.Rewrite.dll located in \"%ProgramFiles%\\Reference Assemblies\\Microsoft\\IIS\".\r\n\r\nRewrite providers must be placed in the .NET Global Assembly Cache (GAC)\r\n\r\n* To sign the assembly, In the Signing tab check \"Sign the assembly\" check box.  \r\n\r\nIn the combo box, select the option <New…> to create a new key. In the \"Create Strong Name Key\" dialog, type DemoKey.snk as the name for the key and uncheck the Protect my key file with a password check box. Click OK.\r\n\r\n![iis-url-rewrite](create-custom-iis-url-rewrite-provider/iis-url-rewrite-4.png)\r\n\r\n\r\n* Select the \"Build Events\" tab and add the following \"Post-build event\" command line:\r\n\r\nCALL \"%VS90COMNTOOLS%\\vsvars32.bat\" > NULL \r\ngacutil.exe /if \"$(TargetPath)\" \r\n\r\nNote: if you use Visual Studio 2010 then replace %VS90COMNTOOLS% with %VS100COMNTOOLS%.\r\n\r\n### Implementing the provider interfaces\r\n\r\n\tpublic class CdnRewriteProvider : IRewriteProvider, IProviderDescriptor\r\n\t{\r\n\t}\r\n\r\n\r\n### Registering and configuring the provider\r\n\r\n* Open IIS Manager and select the URL Rewrite feature\r\n\r\n![Step1](create-custom-iis-url-rewrite-provider/iis-url-rewrite-1.png)\r\n\r\n![Step2](create-custom-iis-url-rewrite-provider/iis-url-rewrite-2.png)\r\n\r\n![Step3](create-custom-iis-url-rewrite-provider/iis-url-rewrite-3.png)\r\n\r\n\r\nThis completes the registration and configuration of a rewrite provider. As a result the web.config file for the default web site will contain the following XML code inside of the <rewrite> section:\r\n\r\n\t<system.webServer>\r\n\t\t<rewrite>\r\n\t\t\t<providers>\r\n\t\t\t\t<provider name=\"T1.IisUrlRewriteModule\" type=\"T1.IisUrlRewriteModule.CdnRewriteProvider, T1.IisUrlRewriteModule, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cd92a3df2f0d20b9\">\r\n\t\t\t\t\t<settings>\r\n\t\t\t\t\t\t<add key=\"config\" value=\"aaa\" />\r\n\t\t\t\t\t</settings>\r\n\t\t\t\t</provider>\r\n\t\t\t</providers>\r\n\t\t</rewrite>\r\n\t</system.webServer>"},{"RelFilename":"2016\\03\\reflux.md","Title":"React + FReflux","CreateTime":"2016-03-05T16:58:20.7114011","Content":"\r\n### React Flow\r\n\r\n![React Flow](reflux/Flux.png)\r\n\r\n#### Create Actions\r\n\r\n\r\n\timport $ = require('jquery');\r\n\timport t1 = require('t1');\r\n\timport FReflux = t1.FReflux;\r\n\timport FRefluxActions = t1.FRefluxActions;\r\n\r\n\tenum Demo1ActionType {\r\n\t\tRequest\r\n\t}\r\n\t\r\n\texport class Demo1Actions extends FRefluxActions<Demo1ActionType> {\r\n\t\tconstructor() {\r\n\t\t\tsuper(Demo1ActionType);\r\n\t\t}\r\n\t\r\n\t\tRequest(name: string) {\r\n\t\t\tthis.dispatchEvent(Demo1ActionType.Request, name);\r\n\t\t}\r\n\t}\r\n\r\n\r\n#### Create Store\r\n\r\n\timport t1 = require('t1');\r\n\timport FReflux = t1.FReflux;\r\n\timport FRefluxStore = t1.FRefluxStore;\r\n\r\n\texport class Demo1State {\r\n\t\tname: string;\r\n\t}\r\n\t\r\n\t\r\n\texport class Demo1Store extends FRefluxStore<Demo1State> {\r\n\t\t_state: Demo1State = new Demo1State();\r\n\t\r\n\t\tconstructor(actions: FRefluxActions<any>[]) {\r\n\t\t\tsuper(actions);\r\n\t\t}\r\n\t\r\n\t\tgetState(): Demo1State {\r\n\t\t\treturn this._state;\r\n\t\t}\r\n\t}\r\n\r\n#### Create Main View\r\n\r\n\texport interface MobileDemo1Props extends React.Props<MobileDemo1> {\r\n\t\thistory: any;\r\n\t}\r\n\t\r\n\texport class MobileDemo1 extends FRefluxStoreComponent<MobileDemo1Props, Demo1State> {\r\n\t\tconstructor() {\r\n\t\t\tthis.name = \"MobileDemo1\";\r\n\t\t\tsuper(_app1Store);\r\n\t\t}\r\n\t\r\n\t\tcomponentWillMount() {\r\n\t\t}\r\n\t\r\n\t\tcomponentWillUnmount() {\r\n\t\t}\r\n\t\r\n\t\tcomponentDidMount() {\r\n\t\t\tsuper.componentDidMount();\r\n\t\t}\r\n\t\r\n\t\tnavigate() {\r\n\t\t\tconsole.log(this.props);\r\n\t\t\tthis.props.history.pushState(null, \"/\");\r\n\t\t\t//this.props.history.replaceState(null, \"/\");\r\n\t\t}\r\n\t\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t<div>React-Router Demo1\r\n\t\t\t\t\t<Link to='Panel1'>Panel1</Link>\r\n\t\t\t\t\t<Link to='Panel2'><button className=\"btn btn-success\">Panel2</button></Link>\r\n\t\t\t\t\t<button onClick={this.navigate.bind(this)}>TEST</button>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\r\n#### Create Panel1 View\r\n\t\r\n\tinterface Panel1Props extends React.Props<Panel1> {\r\n\t}\r\n\t\r\n\t\r\n\tclass Panel1 extends FRefluxReducerComponent<Panel1Props, Demo1State> {\r\n\t\tconstructor() {\r\n\t\t\tsuper();\r\n\t\t}\r\n\t\r\n\t\tgetStateFromStore(state: Demo1State): Demo1State {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\r\n\t\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\tHello Panel-1\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\r\n### Render\r\n\r\n\timport * as Router from 'react-router';\r\n\timport { Route, IndexRoute, Link } from 'react-router';\r\n\r\n\tvar routeMap = (\r\n\t\t\t<Route path=\"/\" component={MobileDemo1}>\r\n\t\t\t\t\t<IndexRoute component={Panel1}/>\r\n\t\t\t\t\t<Route path=\"Panel1\" component={Panel1}/>\r\n\t        <Route path=\"Panel2\" component={Panel2}/>\r\n\t        <Route path=\"*\" component={NotFoundPage} />\r\n\t    </Route>\r\n\t);\r\n\r\n\tReactDOM.render(\r\n\t\t<Router.Router history={Router.browserHistory}>\r\n\t\t\t{routeMap}\r\n\t\t</Router.Router>, \r\n\t\tdocument.getElementById('app1')\r\n\t);\r\n\r\n### Main.js\r\n\r\n\t(function(){\r\n\t\tvar baseUrl = \"/js/Samples/ReactRouterDemo1/\";\r\n\t\r\n\t\trequire.config({\r\n\t\t\tpaths: {\r\n\t\t\t\t\"App\": baseUrl + \"App\",\r\n\t\t\t}\r\n\t\t});\r\n\t})();\r\n\t\r\n\tdefine([\"require\", \"exports\", 'App'], function (require, exports, app) {\r\n\t});\r\n\r\n\r\n### HTML\r\n\r\n\t<html>\r\n\t<head>\r\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\r\n\t\t<title>React Router Demo1</title>\r\n\t\t<script src=\"~/js/requirejs-config.js\"></script>\r\n\t\t<script src=\"~/Scripts/require.js\" data-main=\"/js/Samples/ReactRouterDemo1/Main.js\"></script>\r\n\t</head>\r\n\t<body>\r\n\t\t<div id=\"app1\">\r\n\t\t</div>\r\n\t</body>\r\n\t</html>"},{"RelFilename":"2016\\03\\install-hexo.md","Title":"Install Hexo","CreateTime":"2016-03-05T09:30:43.8953205","Content":"\r\n### Create a GitHub Account\r\n\r\nCreate a new Repository name: \"username.github.io\" \r\n\r\nusername must same as account name\r\n\r\n\r\n### Install Node.js\r\n\r\n\tnpm install hexo -g\r\n\tnpm init Blog\r\n\tcd Blog\r\n\r\nnpm install\r\n\r\n\tnpm install hexo-generator-index --save\r\n\tnpm install hexo-generator-archive --save\r\n\tnpm install hexo-generator-category --save\r\n\tnpm install hexo-generator-tag --save\r\n\tnpm install hexo-server --save\r\n\tnpm install hexo-deployer-git --save\r\n\tnpm install hexo-deployer-heroku --save\r\n\tnpm install hexo-deployer-rsync --save\r\n\tnpm install hexo-deployer-openshift --save\r\n\tnpm install hexo-renderer-marked@0.2 --save\r\n\tnpm install hexo-renderer-stylus@0.2 --save\r\n\tnpm install hexo-generator-feed@1 --save\r\n\tnpm install hexo-generator-sitemap@1 --save\r\n\tnpm install hexo-tag-bootstrap --save\r\n\tnpm install hexo-generator-search --save\r\n\r\n\r\nProcess the following command, and visit localhost:4000 to see the result\r\n\r\n\thexo server\r\n\r\n\r\nThe Following command that generate public folder, you can deploy it to your target site folder.\r\n\r\n\thexo g\r\n\r\nModify _config.yml file in Blog Folder\r\n\r\n\tdeploy:\r\n\t  type: git\r\n  \t  repo: https://github.com/username/username.github.io.git\r\n  \t  branch: master\r\n\r\nDeploy to GitHub command\r\n\r\n\thexo d -g\r\n\r\nOther\r\n\r\n\thexo n #Generate articles，or source\\_posts manually edit/create md file\r\n\thexo s #deploy preview result\r\n\r\nUpdate Hexo\r\n \r\n\tnpm update -g\r\n\r\n\t\r\nInstall Other Theme\r\n\r\n\tgit clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee\t\t\r\n\r\n\r\nModify themes/yelee/_config.yml\r\n\t\r\n\r\n\r\n"},{"RelFilename":"2015\\11\\when-debug-typescript-ts-files-in-chrome.md","Title":"When debug a Typescript application in Google Chrome, the *.ts files are appear totally empty ?","CreateTime":"2015-11-25T07:58:43.991","Content":"\r\nYou try to add following to your web.config\r\n\r\n\t<system.webServer>\r\n\t  ...\r\n\t  <staticContent>\r\n\t    <remove fileExtension=\".tsx\" />\r\n\t    <mimeMap fileExtension=\".tsx\" mimeType=\"application/javascript\" />\r\n\t  </staticContent>\r\n\t</system.webServer>\r\n\r\n"},{"RelFilename":"2015\\08\\nuget-package-element-is-not-declared-warning.md","Title":"nuget 'packages' element is not declared warning","CreateTime":"2015-08-02T09:01:55.263","Content":"\r\nnot a showstopper but when using nuget in a project, it creates a packages.config file with this shape\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<packages>\r\n   ... your packages\r\n</packages>\r\n```\r\n \r\nthis gives a warning in VS\r\n\r\n>The 'packages' element is not declared.\r\n\r\n\r\n\r\nYou can always make simple xsd schema for 'packages.config' to get rid of this warning. To do this, create file named \"packages.xsd\":\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" elementFormDefault=\"qualified\"\r\n      targetNamespace=\"urn:packages\" xmlns=\"urn:packages\">\r\n  <xs:element name=\"packages\">\r\n    <xs:complexType>\r\n      <xs:sequence>\r\n        <xs:element name=\"package\" maxOccurs=\"unbounded\">\r\n          <xs:complexType>\r\n            <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\" />\r\n            <xs:attribute name=\"version\" type=\"xs:string\" use=\"required\" />\r\n            <xs:attribute name=\"targetFramework\" type=\"xs:string\" use=\"optional\" />\r\n            <xs:attribute name=\"allowedVersions\" type=\"xs:string\" use=\"optional\" />\r\n          </xs:complexType>\r\n        </xs:element>\r\n      </xs:sequence>\r\n    </xs:complexType>\r\n  </xs:element>\r\n</xs:schema>\r\n```\r\n\r\nLocation of this file (two options)\r\n\r\nIn the same folder as 'packages.config' file,\r\nIf you want to share packages.xsd across multiple projects, move it to the Visual Studio Schemas folder (the path may slightly differ, it's  D:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Xml\\Schemas for me).\r\nThen, edit <packages> tag in packages.config file (add xmlns attribute):\r\n\r\n```\r\n<packages xmlns=\"urn:packages\">\r\n```\r\n\r\nNow the warning should disappear (even if packages.config file is open in Visual Studio).\r\n"},{"RelFilename":"2015\\07\\asp-net-mvc-throw-exception.md","Title":"ASP.NET MVC throw Exception","CreateTime":"2015-07-27T16:04:37.034","Content":"\nMy application was working fine and after I did some upgrades I am getting this error.\n\n\n\t\tAttempt by 'System.Web.Mvc.PreApplicationStartCode.Start()' to critical method 'System.Web.WebPages.Razor.PreApplicationStartCode.Start()' failed\n\nPlease use this package from nuget\n\nInstall-Package Microsoft.AspNet.Mvc -Version 5.2.2"},{"RelFilename":"2015\\05\\vsnet2013-error.md","Title":"VS.NET 2013 Error","CreateTime":"2015-05-21T14:09:56.8034727","Content":"\r\nGetting Error \"'Microsoft.VisualStudio.Editor.Implementation.EditorPackage' package did not load correctly\"?\r\n\r\n>Please try to remove %LOCALAPPDATA%\\Microsoft\\VisualStudio\\11.0\\ComponentModelCache and restarting VS2012. Hope this will fix your issue.\r\n\r\n\r\nGetting Error \"Object reference not set to an instance of an object.\" when open test project in VS.NET 2013?\r\n\r\nMaybe this helps:\r\n\r\nDelete the contents from the following folders:\r\n\r\n* C:\\Users\\{user}\\AppData\\Local\\Microsoft\\VisualStudio\r\n* C:\\Users\\{user}\\AppData\\Local\\Microsoft\\VSCommon\r\n\r\nSometimes, you need to go to:\r\n\r\n* [x64] C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\r\n* [x86] C:\\Program Files\\Microsoft Visual Studio 14.0\\Common7\\IDE\r\n\r\nand run devenv /resetuserdata.\r\n"},{"RelFilename":"2015\\05\\NuGet-Manager-Console.md","Title":"NuGet Manager Console","CreateTime":"2015-05-07T21:47:26.171","Content":"\r\nList all available versions of a specific package?\r\n\r\n>get-package -ListAvailable -AllVersions -filter nunit -source https://nuget.org/api/v2/\r\n\r\nHow to install special version of package?\r\n\r\n>install-package nunit -version x.xx"},{"RelFilename":"2015\\04\\resharper-shortcut-keys.md","Title":"Resharper shortcut keys","CreateTime":"2015-04-06T07:31:40.79","Content":"\r\nHow to restore parameter info (argument list) shortcut with Resharper?\r\n\r\nIf you go to the **Visual Studio Tools -> Options -> Keyboard** section, you can type the shortcut in the shortcut keys edit box and VS will show what commands are bound to that shortcut combination. So, hitting **ctrl+shift+space** will show you that is mapped to **\"Edit.ParameterInfo\"** for the Workfow Designer, and **\"ReSharper.ReSharper_CompleteCodeSmart\"** for the Text Editor and the XAML UI Designer. You can do a similar thing with **ctrl+p**.\r\n\r\n\r\n\r\n"},{"RelFilename":"2015\\04\\automapper-this-type-is-not-supported-on-this-platform.md","Title":"Automapper 3.0 - This type is not supported on this platform when I use MSTest.exe ?","CreateTime":"2015-04-01T10:12:20.034","Content":"\r\nMSTest show following error:\r\n\r\n>Source value:\r\nSystem.Data.DataTableReader ---> System.PlatformNotSupportedException: Proxy generation not supported on this platform.\r\n\r\nTo fix it, add an explicit call to something in AutoMapper.Net4.dll. For instance, with the class ListSourceMapper :\r\n\r\n\tvar useless = new ListSourceMapper();\r\n\r\nOr you can\r\n\r\n\t[TestClass]\r\n    [DeploymentItem(\"AutoMapper.Net4.dll\")]\r\n    public class YourTest\r\n\t{\r\n\t\t[TestMethod]\r\n\t\tpublic void Test1()\r\n\t\t{\r\n\t\t\t...\r\n\t\t}\r\n\t}"},{"RelFilename":"2015\\03\\how-to-combine-typescript-files.md","Title":"How to compile many typescript files in VS.NET 2013?","CreateTime":"2015-03-30T22:26:45.527","Content":"\r\nWe can add following MSBuild script in your csproj file.\r\n\r\n\t<Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\"\r\n\t    Condition=\"Exists('$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\$(TypeScriptToolsVersion)\\Microsoft.TypeScript.targets')\" />\r\n\t<Target Name=\"CombineT1\" BeforeTargets=\"PrepareForBuild\">\r\n\t  <ItemGroup>\r\n\t    <T1TypeScriptFiles Include=\"$(projectDir)Scripts\\t1\\*.ts;\" Exclude=\"$(projectDir)\\Scripts\\**\\*.d.ts;\" />\r\n\t  </ItemGroup>\r\n\t  <WriteLinesToFile File=\"$(projectDir)Scripts\\t1\\typescriptcompiler.input\" Lines=\"@(T1TypeScriptFiles)\" Overwrite=\"true\" Encoding=\"UTF-8\" />\r\n\t  <Exec Command=\"&quot;$(MSBuildProgramFiles32)\\Microsoft SDKs\\TypeScript\\$(TypeScriptToolsVersion)\\tsc&quot; --out $(projectDir)Scripts\\t1\\t1.js --target ES5 @$(projectDir)Scripts\\t1\\typescriptcompiler.input\" CustomErrorRegularExpression=\"\\.ts\\([0-9]+,[0-9]+\\):(.*)\">\r\n\t  </Exec>\r\n\t</Target>\r\n\r\n"},{"RelFilename":"2015\\03\\jasmine-errors.md","Title":"Jasmine Errors in VS.NET 2013 ","CreateTime":"2015-03-28T09:56:34.19","Content":"\r\nI get the following error:\r\n\r\n>Script:\r\nC:\\Users\\xxx\\AppData\\Local\\Microsoft\\VisualStudio\\12.0\\Extensions\\2q5cdx5o.qzv\\TestFiles\\Jasmine\\v2\\jasmine.js\r\n>\r\nError: 'null' is not an object (evaluating 'currentSpec.expect') #665\r\n\r\n\r\nI find the root cause:\r\n\r\n\tdescribe(\"[TS]Test\", function () {\r\n\t  expect(\"\").toBe(\"\");\r\n\t});\r\n\r\nI forgot to add the 'it' statement around my expect.\r\n\r\n\tdescribe(\"[TS]Test\", function () {\r\n\t  it(\"test\",() => {\r\n\t\texpect(\"\").toBe(\"\");\r\n\t  });\r\n\t});\r\n\r\n\t"},{"RelFilename":"2015\\03\\google-input-chext-flag.md","Title":"What is the GOOGLE_INPUT_CHEXT_FLAG in web pages?","CreateTime":"2015-03-24T23:15:55.246","Content":"\r\nNow a days I can see that just before the ending of the </body> tag something like below appears:\r\n\r\n\t<div id=\"GOOGLE_INPUT_CHEXT_FLAG\" style=\"display: none;\" input=\"\" input_stat=\"{}\"></div>\r\n\r\nI can see this in every webpages whenever I try to Inspect Element in Google Chrome.\r\n\r\nI have got the point. Its because of the extension: **Google Input Tools (by Google)**."},{"RelFilename":"2015\\03\\angular-tutor.md","Title":"angular tutor","CreateTime":"2015-03-24T22:44:12.071","Content":"\r\nHow to load Template in Angular?\r\n\r\n\tpublic class HomeController : Controller\r\n\t{\r\n\t\tpublic ActionResult Template(string id)\r\n\t\t{\r\n\t\t\treturn PartialView(string.Format(\"~/Views/Home/Partials/{0}.cshtml\", id));\r\n\t\t}\r\n\t}\r\n\r\nThen, we can use following code \r\n\r\n\t<div ng-include=\"'/Home/Template/Index'\"></div>\r\n\r\n"},{"RelFilename":"2015\\03\\angular-d-ts-errors-in-typescript-2015-03-16.md","Title":"angular with many errors in typescript typing files","CreateTime":"2015-03-16T22:42:13.031","Content":"\r\nI have a problem with Visual Studio 2013 generating too many errors when using\r\nangular.d.ts typescript type file.\r\n\r\nall in jquery.d.ts, like the following errors:\r\n\r\n>',' expected.</br>\r\n'=' expected.</br>\r\nIdentifier expected.\r\n\r\nThe most likely reason for this is that you are using an older version of TypeScript.\r\nThe language is moving swiftly and some of the features in version 1.4 are particularly useful in definition files, so it is likely that you will need to upgrade to 1.4.\r\n\r\nDownload version 1.4 [here](https://visualstudiogallery.msdn.microsoft.com/2d42d8dc-e085-45eb-a30b-3f7d50d55304) (Updated 2015.01.16)\r\n\r\nHowever, Where can I find the TypeScript version installed in Visual Studio?\r\nyou can simply do in Visual Studio Command Prompt:\r\n\r\n\ttsc -v\r\n\r\nIt will display typescript version\r\n\r\n\tVersion 1.0.3.0\r\n\r\n"},{"RelFilename":"2015\\03\\handling-session-and-authentication-timeouts-in-aspnet-mvc.md","Title":"Handling Session and Authentication Timeouts in ASP.NET MVC","CreateTime":"2015-03-15T11:48:48.4617594","Content":"\r\nThe SessionExpireFilterAttribute action filter is then automatically called before each action to check if Session\"UserName\" is null. If it determines a timeout has not occurred, it allows the actual called action to execute. Otherwise, it forces a redirect to a timeout notification page, which in turn redirects to the logon page to allow the user to re-logon.\r\n\r\n\r\n\t[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = true)]\r\n\tpublic class SessionExpireFilterAttribute : ActionFilterAttribute\r\n\t{\r\n\t\tpublic override void OnActionExecuting(ActionExecutingContext filterContext)\r\n\t\t{\r\n\t\t\tHttpContext ctx = HttpContext.Current;\r\n\r\n\t\t\t// If the browser session or authentication session has expired...\r\n\t\t\tif (ctx.Session[\"UserName\"] == null || !filterContext.HttpContext.Request.IsAuthenticated)\r\n\t\t\t{\r\n\t\t\t\tif (filterContext.HttpContext.Request.IsAjaxRequest())\r\n\t\t\t\t{\r\n\t\t\t\t\t// For AJAX requests, we're overriding the returned JSON result with a simple string,\r\n\t\t\t\t\t// indicating to the calling JavaScript code that a redirect should be performed.\r\n\t\t\t\t\tfilterContext.Result = new JsonResult { Data = \"_LogonTimeoutRedirect_\" };\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// For round-trip posts, we're forcing a redirect to Home/TimeoutRedirect/, which\r\n\t\t\t\t\t// simply displays a temporary 5 second notification that they have timed out, and\r\n\t\t\t\t\t// will, in turn, redirect to the logon page.\r\n\t\t\t\t\tfilterContext.Result = new RedirectToRouteResult(\r\n\t\t\t\t\t\t\tnew RouteValueDictionary {\r\n                        { \"Controller\", \"Home\" },\r\n                        { \"Action\", \"TimeoutRedirect\" }\r\n                });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbase.OnActionExecuting(filterContext);\r\n\t\t}\r\n\t}\r\n\r\n\r\nWe'll create a couple of action filters to provide cross-cutting checks for timeout scenarios. The first will normally be hit when the browser session has timed out, but will also handle if the authentication has timed out first:\r\n\r\n\t[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true, AllowMultiple = true)]\r\n\tpublic class SessionAuthorizeAttribute : AuthorizeAttribute\r\n\t{\r\n\t    protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)\r\n\t    {\r\n\t        HttpContext ctx = HttpContext.Current;\r\n\t \r\n\t        // If the browser session has expired...\r\n\t        if (ctx.Session[\"UserName\"] == null)\r\n\t        {\r\n\t            if (filterContext.HttpContext.Request.IsAjaxRequest())\r\n\t            {\r\n\t                // For AJAX requests, we're overriding the returned JSON result with a simple string,\r\n\t                // indicating to the calling JavaScript code that a redirect should be performed.\r\n\t                filterContext.Result = new JsonResult { Data = \"_LogonTimeoutRedirect_\" };\r\n\t            }\r\n\t            else\r\n\t            {\r\n\t                // For round-trip posts, we're forcing a redirect to Home/TimeoutRedirect/, which\r\n\t                // simply displays a temporary 5 second notification that they have timed out, and\r\n\t                // will, in turn, redirect to the logon page.\r\n\t                filterContext.Result = new RedirectToRouteResult(\r\n\t                    new RouteValueDictionary {\r\n\t                        { \"Controller\", \"Home\" },\r\n\t                        { \"Action\", \"TimeoutRedirect\" }\r\n\t                });\r\n\t            }\r\n\t        }\r\n\t        else if (filterContext.HttpContext.Request.IsAuthenticated)\r\n\t        {\r\n\t            // Otherwise the reason we got here was because the user didn't have access rights to the\r\n\t            // operation, and a 403 should be returned.\r\n\t            filterContext.Result = new HttpStatusCodeResult(403);\r\n\t        }\r\n\t        else\r\n\t        {\r\n\t            base.HandleUnauthorizedRequest(filterContext);\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\r\nThe Timeout Warning Message Page\r\n\r\n\t<meta http-equiv=\"refresh\" content=\"5;url=/Account/Logon/\" />\r\n\t<h2>\r\n\t  Sorry, but your session has timed out. You'll be redirected to the Log On page in 5 seconds...\r\n\t</h2>\r\n\r\nWe can register global filter\r\n\r\n\tpublic static void RegisterGlobalFilters(GlobalFilterCollection filters)\r\n    {\r\n\t\tfilters.Add(new HandleErrorAttribute());\r\n\t\tfilters.Add(new SessionExpireFilterAttribute());\r\n\t\tfilters.Add(new SessionAuthorizationAttribute());\r\n    }\r\n\r\n\r\nClient-Side Calling Code Sample\r\n\r\n\t$.ajax({\r\n\t    url: \"/MyController/MyAction\",\r\n\t    type: 'POST',\r\n\t    dataType: 'json',\r\n\t    data: jsonData,\r\n\t    contentType: 'application/json; charset=utf-8',\r\n\t    success: function (result) {\r\n\t        if (checkTimeout(result)) {\r\n\t            // There was no timeout, so continue processing...\r\n\t        }\r\n\t    },\r\n\t    error: function (result) {\r\n\t        if (checkTimeout(result)) {\r\n\t            // There was no timeout, so continue processing...\r\n\t        }\r\n\t    }\r\n\t});\r\n\r\n\r\n\tfunction checkTimeout(data) {\r\n\t    var thereIsStillTime = true;\r\n\t    if (data) {\r\n\t        if (data.responseText) {\r\n\t            if ((data.responseText.indexOf(\"<title>Log On</title>\") > -1) || (data.responseText.indexOf(\"<title>Object moved</title>\") > -1) || (data.responseText === '\"_LogonTimeoutRedirect_\"')) thereIsStillTime = false;\r\n\t        } else {\r\n\t            if (data == \"_Logon_\") thereIsStillTime = false;\r\n\t        }\r\n\t        if (!thereIsStillTime) {\r\n\t            window.location.href = \"/Home/TimeoutRedirect\";\r\n\t        }\r\n\t    } else {\r\n\t        $.ajax({\r\n\t            url: \"/Home/CheckTimeout/\",\r\n\t            type: 'POST',\r\n\t            dataType: 'json',\r\n\t            contentType: 'application/json; charset=utf-8',\r\n\t            async: false,\r\n\t            complete: function (result) {\r\n\t                thereIsStillTime = checkTimeout(result);\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return thereIsStillTime;\r\n\t}\r\n\r\n\r\nIn Web.config, we can control the session timeout\r\n\r\n\t<system.web>\r\n\t  <sessionState mode=\"InProc\" timeout=\"1\" cookieless=\"UseCookies\" />\r\n\t</system.web>\r\n "},{"RelFilename":"2015\\03\\found-conflicts-between-different-versions-of-the-same-dependent-assemblies.md","Title":"Found conflicts between different versions of the same dependent assemblies","CreateTime":"2015-03-11T21:58:35.53","Content":"\r\n>Found conflicts between different versions of the same dependent assembly. Please set the \"AutoGenerateBindingRedirects\" property to true in the project file. For more information, see http://go.microsoft.com/fwlink/?LinkId=294190.\r\n\r\nConsidering there are about 50 references across the projects I have in this solution, that isn't particularly helpful. \r\n\r\nThere is an easy way to get the compiler to spit out more information.\r\n\r\n1. In Visual Studio 2013 go to Tools > Options.\r\n2. Select Project and Solutions > Build and Run.\r\n3. Find the drop down MSBuild project build output verbosity. Here you can configure MSBuild to give you more information. By default it will be set to \"Minimal\". Change this to \"Detailed'.\r\n4. Rebuild and view the Output window. Copy everything into notepad and search for the **warning** which should tell you which assemblies you need to look at."},{"RelFilename":"2015\\03\\razor-view-throwing-the-name-model-does-not-exist-in-the-current-context.md","Title":"Razor View throwing \"The name 'model' does not exist in the current context\"","CreateTime":"2015-03-04T13:48:50.133","Content":"\nRazor is giving me this nonsensical error:\n\n>The name 'model' does not exist in the current context.\n\nThe part that makes literally zero sense is that this is causing the error:\n\n\t\t\t@model ICollection<DataSourceByActive>\n\nI know for a fact that @model is proper Razor syntax.\n\nSo why is this happening? How can I fix it?\n\nI think you have messed up the web.config file which lives in the Views folder.\n\n>Create a new project targeting same .NET framework and copy its Views/web.config file over top the one in your current project\n\nThis will fix your problem."},{"RelFilename":"2015\\03\\psexec-gets-stuck-on-licence-prompt-when-running-noninteractively.md","Title":"PsExec gets stuck on licence prompt when running non-interactively","CreateTime":"2015-03-04T13:42:15.541","Content":"\nUse the **/accepteula** command-line switch to accept the licence agreement.\n\nOr set\n\n>\t\tHKCU\\Software\\Sysinternals\\PsExec\\EulaAccepted \n\nto 1\n\n**Caution:** if the reg key above is set to 0 (EULA was declined once) then the /accepteula will not work, you have to set the key to 1 manually (or delete it altogether)."},{"RelFilename":"2015\\02\\jquery-1101-does-not-work-well-with-ie11-upgrade-to-1102.md","Title":"JQuery 1.10.1 does not work well with IE11, upgrade to 1.10.2","CreateTime":"2015-02-25T12:29:33.183","Content":"\nJQuery 1.10.1 does not work well with IE11, upgrade to 1.10.2\n\nreference: https://issues.apache.org/jira/browse/WICKET-5404"},{"RelFilename":"2015\\02\\vsnet-found-the-webapi-reference-error.md","Title":"VS.NET found the WebAPI reference error","CreateTime":"2015-02-17T23:41:15.261","Content":"\nI've created a MVC 4 Web API Application inside my solution, but I changed nuget package default location. So I'm getting 2 errors right now. \n\n\n>'System.Web.Http.HttpConfiguration' does not contain a definition for 'MapHttpAttributeRoutes' and no extension method 'MapHttpAttributeRoutes' accepting a first argument of type 'System.Web.Http.HttpConfiguration' could be found (are you missing a using directive or an assembly reference?)\n\n\nA forced reinstall of WebAPI could do the job:\n\n\tupdate-package microsoft.aspnet.webapi -reinstall -project yourProject"},{"RelFilename":"2015\\02\\is-it-possible-to-share-the-location-of-nuget-packages-for-multiple-projects.md","Title":"Is it possible to share the location of Nuget packages for multiple projects ?","CreateTime":"2015-02-17T22:50:48.956","Content":"\nNuget version 2.1\n\nThere is now official documentation on how to control the package locations. The release notes for 2.1 specifies the following configuration in a nuget.config file.\n\nPlease modify NuGet.config file in\n \n\tC:\\Users\\MrBrain\\AppData\\Roaming\\NuGet\\NuGet.Config\n\nand add following \n\n\t<configuration>\n\t  <config>\n\t    <add key=\"repositoryPath\" value=\"C:\\thePathToMyPackagesFolder\" ></add>\n\t  </config>\n\t  ... \n\t</configuration>\n\nRestart VS.NET 2013, NuGet will place packages in the new location."},{"RelFilename":"2015\\02\\jsonnet-serializedeserialize-methods.md","Title":"Json.NET Serialize/Deserialize methods","CreateTime":"2015-02-15T09:33:32.7486954","Content":"\nThe following example demonstrates the use Strong type, JObject, Dynamic different approaches to deal with JSON serialization / deserialization.\n\n\n\tpublic class Food\n\t{\n\t\tpublic DateTime d { get; set; }\n\t\tpublic int n { get; set; }\n\t\tpublic string s { get; set; }\n\t\tpublic int[] a { get; set; }\n\t}\n\nLab1:Using Strong Type to deserialize\n\n\tFood f = JsonConvert.DeserializeObject<Food>(jsonString);\n\nLab2:Using JObject to deserialize\n\n\tJObject jo = JObject.Parse(jsonString);\n\tDateTime d = jo.Property(\"d\").Value.Value<DateTime>();\n\tint n = jo[\"n\"].Value<int>();\n\tstring s = jo[\"s\"].Value<string>();\n\tint[] ary = jo[\"a\"].Value<JArray>()\n\t  .Select(o => o.Value<int>()).ToArray();\n\nLab3:Using Dynamic to deserialize\n\n\tJObject jo = JObject.Parse(jsonString);\n\tdynamic dyna = jo as dynamic;\n\n\tDateTime d = dyna.d;\n\tint n = dyna.n;\n\tstring s = dyna.s;\n\tvar ary = ((JArray)jo[\"a\"]).Cast<dynamic>().ToArray();\n\n\nDeserialize Performance: Lab2 > Lab1 ~= Lab2\n\nLab4:Using Strong Type to serialize\n\n\tFood f = new Food()\n\t{\n\t\td = new DateTime(2015, 1, 1),\n\t\tn = 12345,\n\t\ts = \"MR-Brain\",\n\t\ta = new int[] { 1, 2, 3, 4, 5 }\n\t};\n\tstring json = JsonConvert.SerializeObject(f);\n\nLab5:Using JObject to serialize\n\n\tJObject jo = new JObject();\n\tjo.Add(new JProperty(\"d\", new DateTime(2015, 1, 1)));\n\tjo.Add(new JProperty(\"n\", 12345));\n\tjo.Add(new JProperty(\"s\", \"MR-Brain\"));\n\tjo.Add(new JProperty(\"a\", new JArray(1, 2, 3, 4, 5)));\n\tstring json = jo.ToString(Formatting.None);\n\nLab6:Using Dynamic to serialize\n\n\tdynamic dyna = new JObject();\n\tdyna.d = new DateTime(2015, 1, 1);\n\tdyna.n = 12345;\n\tdyna.s = \"MR-Brain\";\n\tdyna.a = new JArray(1, 2, 3, 4, 5);\n\tstring json = dyna.ToString(Formatting.None);\n\nSerialize Performance: Lab5 > Lab4 > Lab6 \n\n\n"},{"RelFilename":"2015\\02\\why-cant-i-get-the-jenkins-powershell-plugin-to-work.md","Title":"Why can't I get the Jenkins Powershell plugin to work?","CreateTime":"2015-02-14T23:20:04.367","Content":"\nPowerShell says “execution of scripts is disabled on this system.”\n\nJenkins powershell plugin is running 32 bit Powershell\n\n\t64-bit:  C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n\t32-bit:  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\nyou can run following\n\n\t> C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n\tPS C:\\hoge > Set-ExecutionPolicy RemoteSigned\n\tPS C:\\hoge > exit\n\n\t> C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tPS C:\\hoge > Set-ExecutionPolicy RemoteSigned\n\tPS C:\\hoge > exit\n\nOr you can\n\n\tset-executionpolicy -executionpolicy unrestricted\n\tset-executionpolicy -executionpolicy -Scope LocalMachine unrestricted\n\tget-executionpolicy -list\n\n\nOther Information\n\n\tpowershell.exe -executionpolicy unrestricted -command .\\test.ps1\n\n\n"},{"RelFilename":"2015\\02\\how-can-i-run-powershell-with-the-net-4-runtime.md","Title":"How can I run PowerShell with the .NET 4 runtime?","CreateTime":"2015-02-09T22:37:00.1185607","Content":"\nEnabling Execution of PowerShell PS1 Scripts\n\n\tSet-ExecutionPolicy Unrestricted\n\nYou can see exactly what versions Powershell is using by examining the value of *$PSVersionTable*\n\n![PSVersionTable2](https://dl.dropboxusercontent.com/u/13003046/images/PSVersionTable2.png)\n\nNotice the value or CLRVersion begins with a \"2\".\n\nBeing lazy, of course, we hate manual steps, so here is a small PowerShell script that will automatically create and place the necessary files. Be aware that the script as shown below will overwrite existing .config files.\n\n\t$config_text = @\"\n\t<?xml version=\"1.0\"?> \n\t<configuration> \n\t    <startup useLegacyV2RuntimeActivationPolicy=\"true\"> \n\t        <supportedRuntime version=\"v4.0.30319\"/> \n\t        <supportedRuntime version=\"v2.0.50727\"/> \n\t    </startup> \n\t</configuration>\n\t\"@\n\t\n\t$config_text| Out-File $pshome\\powershell.exe.config\n\t$config_text| Out-File $pshome\\powershell_ise.exe.config\n\nStart PowerShell as an Administrator an then run the script.\n\nNow restart PowerShell and examine the value of $PSVersionTable.\n\n\n![PSVersionTable4](https://dl.dropboxusercontent.com/u/13003046/images/PSVersionTable4.png)\n\nAnd now your .NET 4.0 module will load correctly.\n"},{"RelFilename":"2015\\01\\autofac-global-interface-interceptor-with-autofacextrasdynamicproxy2.md","Title":"Autofac global interface interceptor with Autofac.Extras.DynamicProxy2","CreateTime":"2015-01-15T19:30:46.493","Content":"\nYou can't really do EnableInterfaceInterceptors *globally*.\n\nBut you can add the interceptors dynamically and it requires a little work. The way to go is to create a custom Autofac.Module that attaches to all component registrations. I'll show it to you in an example.\n\n\n\tpublic class InterceptorModule : Autofac.Module\n\t{\n\t  // This is a private constant from the Autofac.Extras.DynamicProxy2 assembly\n\t  // that is needed to \"poke\" interceptors into registrations.\n\t  const string InterceptorsPropertyName = \"Autofac.Extras.DynamicProxy2.RegistrationExtensions.InterceptorsPropertyName\";\n\t\n\t  protected override void Load(ContainerBuilder builder)\n\t  {\n\t    // Register global interceptors here.\n\t    builder.Register(c => new CallLogger(Console.Out));\n\t  }\n\t\n\t  protected override void AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)\n\t  {\n\t    // Here is where you define your \"global interceptor list\"\n\t    var interceptorServices = new Service[] { \n\t\t\tnew TypedService(typeof(CallLogger)) \n\t\t};\n\t\n\t    // Append the global interceptors to any existing list, or create a new interceptor\n\t    // list if none are specified. Note this info will only be used by registrations\n\t    // that are set to have interceptors enabled. It'll be ignored by others.\n\t    object existing;\n\t    if (registration.Metadata.TryGetValue(InterceptorsPropertyName, out existing))\n\t    {\n\t      registration.Metadata[InterceptorsPropertyName] =\n\t        ((IEnumerable<Service>)existing).Concat(interceptorServices).Distinct();\n\t    }\n\t    else\n\t    {\n\t      registration.Metadata.Add(InterceptorsPropertyName, interceptorServices);\n\t    }\n\t  }\n\t}\n\nTo make it work, you register the module along with the rest of your dependencies. \n\n\tbuilder.RegisterType<YourType>()\n       .As<YourIInterface>()\n       .EnableInterfaceInterceptors();\n\t// Here's the magic module:\n\tbuilder.RegisterModule<InterceptorModule>();\n\tvar container = builder.Build();\n\n\nIf you run these registrations and resolve, You can see the interceptor works as you'll see the CallLogger output."},{"RelFilename":"2015\\01\\how-to-catch-httprequestvalidationexception.md","Title":"How To Catch HttpRequestValidationException","CreateTime":"2015-01-13T22:12:59","Content":"\nIf you've worked with ASP.NET for any length of time, you have worried about how to handle the Yellow Screen of Death. You know, the one that says:\n\n\tHttpRequestValidationException: A potentially dangerous Request.Form value was detected from the client...\n\nor something similar.\n\nThe common refrain is turn off request validation, but there are times when you want to use the built-in validation functions. You just want a friendlier error for your user.\n\nThis code could be better thought out, but here it is anyway:\n\n\tvoid Application_Error(object sender, EventArgs e) \n\t{ \n\t  // Code that runs when an unhandled error occurs\n\t  Exception ex = Server.GetLastError();\n\t  if (ex is HttpRequestValidationException)\n\t  {\n\t    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(\n\t      \"http://\" + Request.Url.Authority + Request.ApplicationPath + \"/HttpRequestValidationException.aspx\");\n\t    HttpWebResponse response = (HttpWebResponse)req.GetResponse();\n\t\n\t    Response.Clear();\n\t    Response.ClearHeaders();\n\t    for (int i = 0; i < response.Headers.Count; i++)\n\t      Response.AddHeader(response.Headers.GetKey(i), response.Headers.Get(i));\n\t    Response.StatusCode = (int)response.StatusCode;\n\t\n\t    System.IO.Stream src = response.GetResponseStream();\n\t    while (true) {\n\t      int b = src.ReadByte();\n\t      if (b == -1) break;\n\t      Response.OutputStream.WriteByte((byte)b);\n\t    }\n\t\n\t    response.Close();\n\t    Response.End(); \n\t}"},{"RelFilename":"2014\\12\\vs2013-browserlink.md","Title":"Using Browser Link in Visual Studio 2013","CreateTime":"2014-12-29T15:18:50.481","Content":"\r\n![InspectMode](https://dl.dropboxusercontent.com/u/13003046/images/InspectMode.png)\r\n\r\nWeb Essentials adds a number of other great Browser Link extensions that are available through the Web Essentials toolbar. Download [Web Essentials](http://vswebessentials.com/download) to try out these great new features.\r\n\r\n*Inspect Mode* – Allows you to highlight an element in the browser and the corresponding code will be highlighted in Visual Studio.\r\n\r\n*Design Mode* – Allows you to edit the content of an element in the browser and the corresponding code will be updated in Visual Studio. This even works if the HTML was generated by Razor code!\r\n\r\n*Track Unused CSS* – Enters a CSS tracking mode that helps you find unused CSS.\r\n\r\n\r\n**Enabling Browser Link for Static HTML Files**\r\nTo enable Browser Link for static HTML files, add the following to your Web.config file.\r\n\r\n\r\n\t<configuration>\r\n\t  <system.webServer>    \r\n\t    <handlers>\r\n\t      <add name=\"Browser Link for HTML\" path=\"*.html\" verb=\"*\" \r\n\t           type=\"System.Web.StaticFileHandler, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" \r\n\t           resourceType=\"File\" preCondition=\"integratedMode\" />\r\n\t    </handlers>\r\n\t  </system.webServer>    \r\n\t</configuration>\r\n\r\n\r\nDocument reference url from [microsoft](http://www.asp.net/visual-studio/overview/2013/using-browser-link) \r\n"},{"RelFilename":"2014\\12\\javascript-json-date-conversion.md","Title":"JavaScript JSON date conversion","CreateTime":"2014-12-26T09:53:12.0929261","Content":"\nIn JavaScript's Date type, after JSON.stringify() will return ISO-8601 format (yyyy-MM-ddTHH: mm: ss.fffZ); interestingly, the JSON.parse() return a string, and not restored to the original Date type.\n\nISO-8601 format will revert back to the Date of demand, to achieve through JSON.parse() function of Reviver. Examples are as follows:\n\n\tvar dateReviver = function (key, value) {\n\t    var a;\n\t    if (typeof value === 'string') {\n\t        a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n\t        if (a) {\n\t            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n\t        }\n\t        a = /^\\/Date\\((.*?)\\)\\/$/.exec(value);\n\t        if (a) {\n\t          return new Date(parseInt(a[1]));\n\t        }\n\t    }\n\t    return value;\n\t};\n\nWe can invoke it as following:\n\n\tvar strJson = \"\\\"2014-12-25T07:27:13.851Z\\\"\";\n\tvar result = JSON.parse(strJson, dateReviver);\n\t\n\tstrJson = \"\\\"\"/Date(1330444800000)/\\\"\";\n\tresult = JSON.parse(strJson, dateReviver);"},{"RelFilename":"2014\\12\\automatic-package-restore-in-visual-studio.md","Title":"Automatic Package Restore in Visual Studio","CreateTime":"2014-12-24T17:16:25.4764336","Content":"\nWe can add the pre-build event for each of the project that require the packages.config\n\n\tcd $(ProjectDir)\n\tnuget restore -source http://www.nuget.org/api/v2/ -packagesdirectory ../packages\n\n\nWhat if you have custom package sources?\nAll you need to do is create a NuGet.Config file next to your .sln file, containing:\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<configuration>\n\t  <packageSources>\n\t    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n\t    <add key=\"aspnetwebstacknightlyrelease\" value=\"https://www.myget.org/f/aspnetwebstacknightlyrelease/\" />\n\t  </packageSources>\n\t</configuration>\n\nNote that if you have private package sources that you want to keep out of your repo, you can add them to\n\n\t%APPDATA%\\NuGet\\Nuget.config (see this page) for details."},{"RelFilename":"2014\\12\\invoke-or-begininvoke-cannot-be-called-on-a-control-until-the-window-handle-has-been-created.md","Title":"How to avoid BeginInvoke before a handle has been created? ","CreateTime":"2014-12-22T22:12:59","Content":"\nInvoke or BeginInvoke cannot be called on a control until the window handle has been created.\n\n    public static class ControlExtension\n    {\n        public static void SafeInvoke(this Control uiElement, Action updater, bool forceSynchronous)\n        {\n            if (uiElement == null) {\n                throw new ArgumentNullException(\"uiElement\");\n            }\n\n            if (uiElement.InvokeRequired) {\n                if (forceSynchronous) {\n                    uiElement.Invoke((Action)delegate\n                    {\n                        SafeInvoke(uiElement, updater, forceSynchronous);\n                    });\n                }\n                else {\n                    uiElement.BeginInvoke((Action)delegate\n                    {\n                        SafeInvoke(uiElement, updater, forceSynchronous);\n                    });\n                }\n            }\n            else {\n                if (uiElement.IsDisposed) {\n                    throw new ObjectDisposedException(\"Control is already disposed.\");\n                }\n                updater();\n            }\n        }\n    }"},{"RelFilename":"2014\\12\\outlook-2007-requiring-a-password-when-resuming-from-hibernation.md","Title":"Outlook 2007 requiring a Password When Resuming from Hibernation ","CreateTime":"2014-12-04T09:31:12.0324534","Content":"\nI recently noticed that a Need password prompt after resuming from hibernation mode.\n\nYou can download MicrosoftFixit50636.msi from Microsoft website (http://support.microsoft.com/kb/949918/en).\n\n"},{"RelFilename":"2014\\11\\aspnet-mvc-table-grid-post-form-and-read-lines.md","Title":"ASP.NET MVC Table Grid Post Form And Read Lines","CreateTime":"2014-11-30T18:47:47.515","Content":"\nHow can read the posted grid data line by line?\n\nYou can create a Model for Stock and it can be bind to your view. Then you can pass list of stock objects to controller as below.\n\n**Stock Model**\n\n\tpublic class Stock\n\t{\n\t    public int StockId { get; set; }\n\t    public int Amount { get; set; }\n\t    public decimal Price { get; set; }\n\t}\n\n**View**\n\n\t@model IEnumerable<Stock>\n\t<form action=\"/Controler/ActionStockNew\" method=\"post\" id=\"form\">\n\t<table>\n\t    @for (int i = 0; i < Model.Count(); i++)\n\t    {<tr>\n\t        <td>\n\t            <input type=\"text\" name=\"[@i].StockId\" />\n\t        </td>\n\t        <td>\n\t            <input type=\"text\" name=\"[@i].Amount\" />\n\t        </td>\n\t        <td>\n\t            <input type=\"text\" name=\"[@i].Price\" />\n\t        </td>\n\t    </tr>\n\t    }\n\t</table>\n\t<input type=\"submit\" value=\"Save\" />\n\t</form>\n\n**Controllers**\n\n\tpublic ActionResult ActionStockNew()\n\t{\n\t    List<Stock> stockList = new List<Stock>();\n\t    // fill stock\n\t\n\t    return View(stockList);\n\t}\n\t\n\t[HttpPost]\n\tpublic ActionResult ActionStockNew(ICollection<Stock> stockList)\n\t{\n\t    // process\n\t}"},{"RelFilename":"2014\\11\\overriding--operator-how-to-compare-to-null.md","Title":"Overriding == operator. How to compare to null?","CreateTime":"2014-11-21T22:12:59","Content":"\nHere is a simplified example:\n\n\tpublic static bool operator ==(ThreeDPoint a, ThreeDPoint b)\n\t{\n\t    if (a == null)\n\t    {\n\t         //any code here never gets executed!  We first die a slow painful death.\n\t    }\n\t    return a.Equals(b);\n\t}\n\nHowever, what happens when a ThreeDPoint  object is null?\n\nYou can't write:\n\n\tThreeDPoint  a;\n\tif (a == null)\n\t{\n\t    //fail!\n\t}\n\nUse object.ReferenceEquals(person1, null) instead of the == operator:\n\n\tpublic static bool operator ==(ThreeDPoint a, ThreeDPoint b)\n\t{\n\t    // If both are null, or both are same instance, return true.\n\t    if (System.Object.ReferenceEquals(a, b))\n\t    {\n\t        return true;\n\t    }\n\t\n\t    // If one is null, but not both, return false.\n\t    if (((object)a == null) || ((object)b == null))\n\t    {\n\t        return false;\n\t    }\n\t\n\t    // Return true if the fields match:\n\t    return a.x == b.x && a.y == b.y && a.z == b.z;\n\t}"},{"RelFilename":"2014\\10\\how-to-compile-razor-views-at-compile-time.md","Title":"How to compile razor views at compile time ?","CreateTime":"2014-10-16T10:05:31.485","Content":"\nRazor views are dynamically compiled by the ASP.NET runtime. If you want your views to be built at compile-time you could add the following option to your .csproj file:\n\n\t<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\n\t\t...\n\t    <MvcBuildViews>true</MvcBuildViews>\n\t</PropertyGroup>\n\n\t...\n\t<Target Name=\"MvcBuildViews\" AfterTargets=\"AfterBuild\" Condition=\"'$(MvcBuildViews)'=='true'\">\n    \t<AspNetCompiler VirtualPath=\"temp\" PhysicalPath=\"$(WebProjectOutputDir)\" />\n\t</Target>\n\n"},{"RelFilename":"2014\\08\\how-to-get-vsnet-2013-offline-update-3-.md","Title":"How to get VS.NET 2013 off-line Update 3 ?","CreateTime":"2014-08-08T22:12:59","Content":"\nDownload VS.NET 2013 Update 3 online setup file from http://www.microsoft.com/en-US/download/details.aspx?id=43721\n\nInput following command\n>VS2013.3.exe /layout\n\n![img](https://dl.dropboxusercontent.com/u/13003046/images/VS2013-Update3.PNG)\n\nYou will get the about 1.8G files in download folder.\nClick VS2013.exe will install VS.NET 2013 Update 3."},{"RelFilename":"2014\\07\\c-convert-xml-string-to-object.md","Title":"C# Convert XML String to Object","CreateTime":"2014-07-04T22:12:59","Content":"\nYou need to use the xsd.exe tool which gets installed with the Windows SDK into a directory something similar to:\n\n\tC:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\bin\n\nAnd on 64bit computers:\n\n\tC:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v6.0A\\bin\n\nOn the first run, you use xsd.exe and you convert your sample XML into a XSD file (XML schema file):\n\n\txsd yourfile.xml\n\nThis gives you yourfile.xsd, which in a second step, you can convert again using xsd.exe into a C# class:\n\n\txsd yourfile.xsd /c\n\nYou can deserialize xml string to C# object:\n\n\tStringReader sr = new StringReader(xmlStr);\n\tXmlSerializer mySerializer = new XmlSerializer(typeof(YourObject));\n\tYourObject obj = (YourObject)mySerializer.Deserialize(sr);\n\nYou can serialize object to **simple** xml string.\nFirst, you must declare namespace in YourObject:\n\n\tpublic class YourObject\n\t{\n\t   public YourObject()\n\t   {\n\t    this._namespaces = new XmlSerializerNamespaces(new XmlQualifiedName[] {\n\t      new XmlQualifiedName(string.Empty, \"urn:Abracadabra\") // Default Namespace\n\t    });\n\t  }\n\t\n\t  [XmlNamespaceDeclarations]\n\t  public XmlSerializerNamespaces Namespaces\n\t  {\n\t    get { return this._namespaces; }\n\t  }\n\t  private XmlSerializerNamespaces _namespaces;\n\t\n\t  ...\n\t}\n\nThen you can start serialize obj to xml string:\n\n\tMemoryStream ms = new MemoryStream();\n\tXmlSerializer mySerializer = new XmlSerializer(typeof(YourObject));\n\tmySerializer.Serialize(ms, obj, obj.Namespaces);\n\tms.Position = 0;\n\tStreamReader sr = new StreamReader(ms);\n\tstring strXml = sr.ReadToEnd();"},{"RelFilename":"2014\\07\\display-gmt-datetime-format-string.md","Title":"Display GMT date-time format string for C#","CreateTime":"2014-07-01T11:31:39.5657917","Content":"\nThe perform code is:\n\n\tpublic static string GetGmtTimeString(this DateTime now)\n\t{\n\t  double gmt = TimeZoneInfo.Local.GetUtcOffset(now).TotalHours;\n\t  string gmtTime = string.Format(\"{0} GMT{1}{2}\",\n\t    now.ToString(\"yyyy/MM/dd HH:mm:ss\"),\n\t      (gmt >= 0) ? \"+\" : \"\",\n\t      gmt);\n\t  return gmtTime;\n\t}"},{"RelFilename":"2014\\06\\nullreferenceexception-unexplained-error-in-aspnet-mvc.md","Title":"NullReferenceException unexplained error in ASP.NET MVC","CreateTime":"2014-06-29T22:12:59","Content":"\n\t[NullReferenceException: Object reference not set to an instance of an object.]\n\t   System.Web.Mvc.<ConvertResults>d__2.MoveNext() +105\n\t   System.Web.Mvc.<Validate>d__1.MoveNext() +1050  System.Web.Mvc.DefaultModelBinder.OnModelUpdated(ControllerContext controllerContext, ModelBindingContext bindingContext) +404\n\nPlease check your *Validate* function code in ***xxx*Model** (inherited *IValidatableObject*). <font color='red'>You should not return null value.</font>\n\n\tpublic IEnumerable<ValidationResult> Validate(ValidationContext validationContext)\n\t{\n\t  return null;   // this is error code\n\t}\n\n"},{"RelFilename":"2014\\06\\using-forms-authentication-in-aspnet-mvc.md","Title":"Using Forms Authentication in ASP.NET MVC","CreateTime":"2014-06-25T22:12:59","Content":"\nIn Web.config\n\n\t<configuration>\n\t  <system.web>\n\t    <authentication mode=\"Forms\">\n\t      <forms defaultUrl=\"~/Home/Index/\" loginUrl=\"~/Home/Login/\" timeout=\"30\" ></forms>\n\t    </authentication>\n\t    <authorization>\n\t      <deny users=\"?\"></deny>\n\t    </authorization>\n\t  </system.web>\n\t  <location path=\"Scripts\">\n\t    <system.web>\n\t\t  <authorization>\n\t\t    <allow users=\"*\"></allow>\n\t\t  </authorization>\n\t\t</system.web>\n\t  </location>\n\t</configuration>\n\n\nCreate LoginViewModel.cs\n\n\tpublic class LoginViewModel : IValidatableObject\n\t{\n\t\t[DisplayFormat(ConvertEmptyStringToNull = false)]\n\t\tpublic string ReturnUrl { get; set; }\n\n\t\t[DisplayFormat(ConvertEmptyStringToNull = false)]\n\t\t[Required]\n\t\tpublic string UserName { get; set; }\n\n\t\t[DisplayFormat(ConvertEmptyStringToNull = false)]\n\t\t[Required]\n\t\t[DataType(DataType.Password)]\n\t\t[Display(Name = \"Password\")]\n\t\tpublic string Password { get; set; }\n\n\t\t[Display(Name = \"Remember me?\")]\n\t\tpublic bool RememberMe { get; set; }\n\n\t\tpublic IEnumerable<ValidationResult> Validate(ValidationContext validationContext)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\nCreate HomeController.cs\n\n\tpublic class HomeController : Controller\n\t{\n\t\t[AllowAnonymous]\n\t\tpublic ActionResult Login(string ReturnUrl)\n\t\t{\n\t\t\t//ReturnUrl: url that is before user login\n\t\t\tvar vm = new LoginViewModel() { ReturnUrl = ReturnUrl };\n\t\t\treturn View(vm);\n\t\t}\n\n\t\t[AllowAnonymous]\n\t\t[HttpPost]\n\t\tpublic ActionResult Login(LoginViewModel model)\n\t\t{\n\t\t\t//\n\t\t\tif( !ModelState.IsValid )\n\t\t\t{\n\t\t\t\treturn View(model);\n\t\t\t}\n\n\t\t\t//todo check login account and password\n\t\t\tif (false)\n\t\t\t{\n              ...\n\t\t\t}\n\n\t\t\tFormsAuthentication.RedirectFromLoginPage(model.UserName, false);\n\t\t\treturn Redirect(FormsAuthentication.GetRedirectUrl(model.UserName, false));\n\t\t}\n\t\t[AllowAnonymous]\n        public ActionResult Logout()\n        {\n            Session.Abandon();\n            FormsAuthentication.SignOut();\n            return RedirectToAction(\"Login\", \"Home\");\n        }\n\n\nIn Home/Login.cshtml\n\n\t@using (Html.BeginForm(\"Login\", \"Home\", new { ReturnUrl=Model.ReturnUrl }, FormMethod.Post, new { autocomplete=\"off\" }))\n\t{\n\t  @Html.TextBoxFor(m => m.UserName) \n\t  @Html.ValidationMessageFor(m => m.UserName)\n\t  <br />\n\t  @Html.PasswordFor(m => m.Password) \n\t  @Html.ValidationMessageFor(m => m.Password)\n\t  <br />\n\t  <input type=\"submit\" value=\"Login\" />\n\t}"},{"RelFilename":"2014\\06\\how-do-i-use-the-qdir-internal-file-association-rules-eg-7zip.md","Title":"How do i use the Q-Dir internal file association rules eg 7-Zip? ","CreateTime":"2014-06-11T22:12:59","Content":"\n*Example 1:*\nEg: For 7-zip, with 7-zip in the default Program Files folder.\n>*.zip;*.rar=C:\\Program Files\\7-Zip\\7zFM.exe \n\n*Example 2:*\nQ-Dir is on the USB Stik and Notepad++ also.\nThe file extension \"txt\", \"cpp\", \"pl\", \"ini\", \"php\", \"cgi\" to be with Notepad++ open. \n\n>*.txt;*.cpp;*.pl;*.ini;*.php;*.cgi=%drive%/npp/unicode/notepad++.exe \n\nOr even for portable 7-Zip : \n\n>*.zip;*.rar;*.7z;*.tar;*.iso;*.lzh=%drive%/7-Zip/7zFM.exe \n\n%drive% is a placeholder for the drive from which to Q-Dir is started.\nIn the case of: the Q-Dir path is \"M:/Q-Dir/Q-Dir.exe\" then would be %drive% a placeholder for \"M:\". \n\nThis allows you to define yourself,\nthrough the menu :\nExtras >> ... more options, then tab bar Association. \n\n![img](https://dl.dropboxusercontent.com/u/13003046/images/Assoziation_in_Q_Dir.png)"},{"RelFilename":"2014\\06\\select-distinct-using-linq.md","Title":"Select distinct using linq","CreateTime":"2014-06-05T22:12:59","Content":"\nUsing [morelinq](https://code.google.com/p/morelinq/) you can use DistinctBy:\n\n\tmyList.DistinctBy(x => x.id);\n\nOtherwise, you can use a group:\n\n\tmyList.GroupBy(x => x.id)\n\t\t.Select(g => g.First());\n\nOr you can use linq syntax\n\n\tdistinctData = from tb1 in myList\n\t\tgroup tb1 by tb1.id into g\n\t\tselect g.First();\n\nYou can create custom extension method:\n\n\tpublic static class EnumerableExtender\n\t{\n\t\tpublic static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n\t\t{\n\t\t\tHashSet<TKey> seenKeys = new HashSet<TKey>();\n\t\t\tforeach (TSource element in source)\n\t\t\t{\n\t\t\t\tvar elementValue = keySelector(element);\n\t\t\t\tif (seenKeys.Add(elementValue))\n\t\t\t\t{\n\t\t\t\t\tyield return element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\nWould be better to write a lot of use.\n\n\tdistinctDatas = myList.DistinctBy(person => person.Name);"},{"RelFilename":"2014\\06\\get-class-list-for-element-with-jquery.md","Title":"Get Class list for element with jQuery","CreateTime":"2014-06-05T22:12:59","Content":"\nYou can iterate and find the one you want:\n\n\tvar classList = $('#divId').attr('class').split(/\\s+/);\n\t$.each( classList, function(index, item){\n\t    if (item === 'someClass') {\n\t       //do something\n\t    }\n\t});"},{"RelFilename":"2014\\06\\jquery-multiple-attribute-selector.md","Title":"jQuery Multiple Attribute Selector","CreateTime":"2014-06-04T22:12:59","Content":"\njQuery Multiple Attribute Selector\n\n>input name=value *AND* name2=value2\n\nis perform following:\n\n\t$['input[name=\"value\"][name2=\"value2\"]')\n\n>input name=value *OR* name2=value2\n\nis perform following:\n\n\t$['input[name=\"value\"] , [name2=\"value2\"]')\n"},{"RelFilename":"2014\\06\\unit-testing-aspnet-web-site-project-code-stored-in-app_code.md","Title":"Unit Testing ASP.NET Web Site Project code stored in APP_Code","CreateTime":"2014-06-03T22:12:59","Content":"\nHere's a Website.targets file you can include in unit testing solution. It (re)compiles website only when App_Code changes. Just add something in **Test Project** like\n\n\t<PropertyGroup>\n\t    <WebsiteName>*MyWebsite*</WebsiteName>\n\t    <WebsitePath>..</WebsitePath>\n\t  </PropertyGroup>\n\t  <Import Project=\"$(ProjectDir)\\Website.targets\" ></Import>\n\t  <Target Name=\"BeforeBuild\" DependsOnTargets=\"CompileWebsite\">\n\t  </Target>\n\nto your .csproj, customizing WebsiteName and WebsitePath and you should be ready to create **Website.targets** file in Test Project Folder:\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<!--\n\t    Target that compiles Website's App_Code to be used for testing\n\t  -->\n\t<Project DefaultTargets=\"CompileWebsite\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\t  <ItemGroup>\n\t    <AppCodeFiles Include=\"$(WebsitePath)\\$(WebsiteName)\\App_Code\\**\\*.*\" ></AppCodeFiles>\n\t  </ItemGroup>\n\t  <Target Name=\"CompileWebsite\" Inputs=\"@(AppCodeFiles)\" Outputs=\"$(ProjectDir)\\PrecompiledWeb\\bin\\App_Code.dll\">\n\t    <AspNetCompiler VirtualPath=\"$(WebsiteName)\" PhysicalPath=\"$(WebsitePath)\\$(WebsiteName)\" TargetPath=\"$(ProjectDir)\\PrecompiledWeb\" Force=\"true\" Debug=\"true\" ></AspNetCompiler>\n\t  </Target>\n\t  <Target Name=\"CleanWebsite\">\n\t    <RemoveDir Directories=\"$(WebsitePath)\\$(WebsiteName)\\PrecompiledWeb\" ></RemoveDir>\n\t  </Target>  \n\t</Project>"},{"RelFilename":"2014\\06\\how-to-deploy-files-for-unit-test-project.md","Title":"How to deploy files for VS.NET Unit Test Project","CreateTime":"2014-06-03T22:12:59","Content":"\nHere’s the easiest way to accomplish deploying folders to the TestResults folder:\n\n1.\tRight click on the .testrunconfig file in your solution explorer.  For me, its LocalTestRun.testrunconfig.\n2.\tSelect Open With and select XML editor\n3.\tAdd a deployment item, specifying the relative path as the file name and an outputdirectory value of the directory name.  In my example, I want to deploy everything in the configuration directory to a folder called configuration in the testrun folder, so I’ve added the following entry:\n\n```xml\n<Deployment>\n  <DeploymentItem filename=\"Services\\Identity\\Claim\\ClaimService.Test\\configuration\\\" outputDirectory=\"configuration\\\" ></DeploymentItem>\n</Deployment>\n```\n\nNow when my tests execution, Visual Studio copies over all my configuration file entries and is able to load the app.config file successfully."},{"RelFilename":"2014\\06\\log-all-methods-using-autofac-interceptor.md","Title":"log all methods using AutoFac interceptor","CreateTime":"2014-06-02T22:12:59","Content":"\nAdd references to:\n\n*\tAutofac.dll (v3.1.1)\n*\tAutofac.Extras.DynamicProxy2.dll (v3.0.2)\n*\tCastle.Core.dll (Castle.Core 3.2.0 for .NETFramework v4.0 Client Profile)\n\n#Create Interceptors#\nInterceptors implement the Castle.DynamicProxy.IInterceptor interface. Here's a simple interceptor example that logs method calls including inputs and outputs:\n\n\tpublic class LoggerClass : IInterceptor\n\t{\n\t\tpublic void Intercept(IInvocation invocation)\n\t\t{\n\t\t\tConsole.WriteLine(\"Calling method {0} with parameters {1}... \",\n\t\t\t\tinvocation.Method.Name,\n\t\t\t\tstring.Join(\", \", invocation.Arguments.Select(a => (a ?? \"\").ToString()).ToArray()));\n\t\n\t\t\tinvocation.Proceed();\n\t\n\t\t\tConsole.WriteLine(\"Done: result was {0}.\", invocation.ReturnValue);\n\t\t}\n\t}\n\n#Register Interceptors with Autofac#\nInterceptors must be registered with the container. You can register them either as typed services or as named services. If you register them as named services, they must be named IInterceptor registrations.\n\nWhich of these you choose depends on how you decide to associate interceptors with the types being intercepted.\n\n\t// Named registration\n\tbuilder.Register(c => new LoggerClass())\n\t       .Named<IInterceptor>(\"log-calls\");\n\t\n\t// Typed registration\n\tbuilder.Register(c => new LoggerClass());\n\n#Enable Interception on Types#\nWhen you register a type being intercepted, you have to mark the type at registration time so Autofac knows to wire up that interception. You do this using the EnableInterfaceInterceptors() and EnableClassInterceptors() registration extensions.\n\n\tContainerBuilder cb = new ContainerBuilder();\n\tcb.RegisterType<SomeType>()\n\t\t .As<ISomeInterface>()\n\t\t .EnableInterfaceInterceptors()\n\t\t .InterceptedBy(typeof(LoggerClass));\n\tcb.Register(c => new LoggerClass());\n\nUnder the covers, EnableInterfaceInterceptors() creates an interface proxy that performs the interception, while EnableClassInterceptors() dynamically subclasses the target component to perform interception of virtual methods.\n\nBoth techniques can be used in conjunction with the assembly scanning support, so you can configure batches of components using the same methods."},{"RelFilename":"2014\\05\\cannot-see-cs-files-after-last-rename-vsnet-2013-projects.md","Title":"Cannot see cs files after last rename VS.NET 2013 Projects","CreateTime":"2014-05-31T21:00:34.2307138","Content":"\nAfter I rename VS.NET 2013 Project Name, I had this **\"The 'Microsoft.VisualStudio.Editor.Implementation.EditorPackage' package did not load correctly.\"** error message when I started up Visual Studio 2013.\n\n![img](https://dl.dropboxusercontent.com/u/13003046/images/VS2013-ActivityLog-xml-Exception.png)\n\nThis is telling me to open ActivityLog.xml, and hopefully an answer will be found.  So I opened up that file and found some error entries:\n\n>No EditorOptionDefinition export found for the given option name: Graphics/Simple/Enable\nParameter name: optionId\n\nFor Visual Studio 2013, it’s located in the \n>%LOCALAPPDATA%\\Microsoft\\VisualStudio\\12.0 folder.\nFor Visual Studio 2012, it's 11.0 folder.\n\nI renamed **ComponentModelCache** to **ComponentModelCache.Borked** and restarted Visual Studio. It started right up and without any errors."},{"RelFilename":"2014\\05\\database-diagram-support-objects-cannot-be-installed.md","Title":"Database diagram support objects cannot be installed","CreateTime":"2014-05-31T09:57:52.4456083","Content":"\nIf you ever get a message like this when trying to create a diagram in SQL 2005/2008 Express.\n\n>Database diagram support objects cannot be installed because this database does not have a valid owner. \n>\nTo continue, first use the Files page of the Database Properties dialog box or the ALTER AUTHORIZATION statement to set the database owner to a valid login, then add the database diagram support objects.\n\n\nHere's step by step what you have to do:\n\n\tEXEC sp_dbcmptlevel 'yourDB', '90';\n\tgo\n\tALTER AUTHORIZATION ON DATABASE::yourDB TO \"yourLogin\"\n\tgo\n\tuse [yourDB]\n\tgo\n\tEXECUTE AS USER = N'dbo' REVERT\n\tgo"},{"RelFilename":"2014\\05\\microsoft-fastcgi-error-0x80070585.md","Title":"Microsoft FastCGI Error 0x80070585","CreateTime":"2014-05-31T09:53:26.9068892","Content":"\nIf you run FastCGI and show following error:\n\n\n\tFastCGI Error\n\tThe FastCGI Handler was unable to process the request.\n\t--------------------------------------------------------------------------------\n\tError Details:\n\tCould not find entry for \"php\" on site 2043809562 in [Types] section. \n\tError Number: 1413 (0x80070585). \n\tHTTP Error 500 - Server Error.\n\tInternet Information Services (IIS)\n\n\nYou can modify C:\\WINDOWS\\system32\\inetsrv\\fcgiext.ini file:\n\n\t[Types]\n\tphp=PHP\n\t\n\t[PHP]\n\tExePath=C:\\Devp\\PHP\\php-cgi.exe\n\tInstanceMaxRequests=10000\n\tActivityTimeout=300\n\tRequestTimeout=300\n\tEnvironmentVars=PHP_FCGI_MAX_REQUESTS:10000,PHPRC:C:\\Devp\\PHP\\"},{"RelFilename":"2014\\05\\cant-save-your-table-changes-in-sql2008-management-studio.md","Title":"Can’t save your table changes in SQL2008 Management Studio","CreateTime":"2014-05-31T09:46:25.3263552","Content":"\nCan’t save your table changes in SQL2008 Management Studio ?\n\nIn SQL Server 2008, when you do some changes on a table and save it you’ll get a warning message like below\n\n    Saving changes is not permitted. The changes you have made require the following tables to be dropped and re-created. You have either made changes to a table that can’t be re-created or enabled the option Prevent saving changes that require the table to be re-created.\n\nWhat the… that didn’t happen to me in SQL Server 2005 nor previous versions of SQL Server. So there is definitely a behaviour change in the new management studio. Luckily this behaviour can be disabled. You just need to go to Tools -> Options then go to the Designer Page and uncheck \"Prevent saving changes that require table re-creation\"."},{"RelFilename":"2014\\05\\a-mixedmode-assembly-exception-message-been-showed.md","Title":"A “mixed-mode assembly exception” Message been showed.","CreateTime":"2014-05-31T08:13:57.7499025","Content":"\nTo run .NET 2.0 assembly in .NET 4.0 environment, a “mixed-mode assembly exception” Message been showed.\n\nAdd a configuration in the app.config: startup\n\n    <startup useLegacyV2RuntimeActivationPolicy=”true”> \n      <supportedRuntime version=”v4.0”/> \n    </startup>\n\nreference from MSDN, specifically address: http://msdn.microsoft.com/zh-cn/library/bbx34a2h.aspx"},{"RelFilename":"2014\\05\\why-isnt-there-an-assembly-unload-method.md","Title":"Why isn't there an Assembly. Unload method?","CreateTime":"2014-05-31T08:13:57.5223736","Content":"\n\nPlease refer to this article (http://blogs.msdn.com/jasonz/archive/2004/05/31/145105.aspx).\n\nMemory consumption been eating more and more?\n\n    do\n    {\n      Assembly.LoadFrom(\"Library1.dll\");\n    }while( true );\n\nThe result is NO. It will only keep a copy of Library1 Assembly in Memory, And never been release.\nBut I need the plugin Mechanism for Load/Unload Assembly.\n\nHow to load and unload Library1 Assembly?\nStep1: Create the Library1 Project.\n\n    [Serializable]\n    public class MyClass1\n    {\n      public string Test()\n      {\n        return \"abc\";\n      }\n    }\n\nStep 2: Create the Test Project.\n\n    AppDomainSetup ads = new AppDomainSetup();\n    ShadowCopyFiles = \"true\";\n    var myAppDomain = AppDomain.CreateDomain(\"MyAppDomainName\", null, ads);\n\nThe follow code will load Library1.dll file.\n\n    object proxy = myAppDomain.CreateInstanceFromAndUnwrap(\"Library1.dll\", \"Library1.MyClass1\");\n\nInvoke the Test Method.\n\n    MethodInfo mi = proxy.GetType().GetMethod(\"Test\", BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\n    string s = (string)mi.Invoke(proxy, new object[]{});\n\nUnload the Library1.dll file.\n\n    AppDomain.Unload(myAppDomain);\n\nIf you use T1 Common Library. You can write the following simple code.\n\n    UnloadAssembly asm = UnloadAssembly.Load(\"Library1.dll\");\n    UnloadClass cls = asm.GetUnloadClass(\"Library1.MyClass1\");\n    string s = (string)cls.Invoke(\"Test\");\n"},{"RelFilename":"2014\\05\\msbuild-get-output-message.md","Title":"Title:How do I get the <Message> msbuild task that shows up in the Visual Studio .NET project output?","CreateTime":"2014-05-28T13:42:41.713","Content":"\r\n\r\n```xml\r\n<Target Name=\"BeforeBuild\">\r\n  <Message Text=\"Justin Dearing Message\" />\r\n<Target/>\r\n```\r\n\r\nHowever, the messages don't show up in the Visual Studio .NET build output.\r\n\r\nTo change the build output verbosity shown in the VS.NET output window, open the Options dialog and select the Build and Run settings below the Projects and Solutions node.\r\n\r\n![options dialog](msbuild-get-output-message/2014-05-28_134204.png)\r\n\r\nUnless you explicitly specify a low message importance, your messages should show up at <font color='blue'>Normal</font> verbosity or higher.\r\n"},{"RelFilename":"2014\\05\\remove-the-last-character-in-a-string-in-tsql.md","Title":"Remove the last character in a string in T-SQL?","CreateTime":"2014-05-03T22:12:59","Content":"\nHow do I remove the last character in a string in T-SQL?\n\nI.E. \n\n>'TEST STRING'\n\nto return:\n\n>'TEST STRIN'\n\nSample code:\n\n\tDECLARE @String VARCHAR(100)\n\tSET @String = 'TEST STRING'\n\t\n\t-- Chop off the end character\n\tSET @String = LEFT(@String, LEN(@String) - 1)\n\t\n\tSELECT @String"},{"RelFilename":"2013\\10\\render-dynamic-model-in-razor-view-engine-and-aspnet-mvc.md","Title":"Render dynamic model in Razor view engine and ASP.NET MVC","CreateTime":"2013-10-13T22:12:59","Content":"\nWhen I try to render a view whose model type is specified as: @model dynamic\n\nby using the following code:\n\n\t@{ Html.RenderPartial(\"PartialView\", Model.UserProfile); }\n\nI get the following exception:\n\n>'System.Web.Mvc.HtmlHelper<dynamic>' has no applicable method named 'RenderPartial' \nbut appears to have an extension method by that name. \nExtension methods cannot be dynamically dispatched. \nConsider casting the dynamic arguments or calling the extension method without the extension method syntax.\n\nAnswer: It appears that the view where I was placing the RenderPartial code had a dynamic model, and thus, MVC couldn't choose the correct method to use. Casting the model in the RenderPartial call to the correct type fixed the issue.\n\n\t@Html.Partial(\"_PartialView\", (ModelClass)View.UserProfile)\n\t@{ Html.RenderPartial(\"PartialView\", (ModelClass)Model.UserProfile); }\n\nWhen you send the anonymous type model to the view:\n\n\treturn View(new {x=4, y=6});\n\nIt show that using anonymous types is not supported, however, there is a workaround, you can use an ExpandoObject, convert it to Expando\n\n\tusing T1.Web.Mvc4;\n\treturn View(new {x=4, y=6}.ToExpando());"},{"RelFilename":"2013\\09\\adding-the-globalasaxcs-file-in-aspnet-website.md","Title":"Adding the Global.asax.cs file in Asp.net WebSite","CreateTime":"2013-09-08T22:12:59","Content":"\nIf we use Asp.net Web Application (File -> New-> Project-> Asp.net Web Application), we can add Global.asax as well as Global.asax.cs file.\n\nHowever, if we use Asp.net Web site (File->New->Website->Asp.net Website), it is not the case. By default we will have Global.asax file only and not the Global.asax.cs file.\n\nThe structure of the Global.asax file is as under\n\n\t<%@ Application Language=\"C#\" %>\n\t<script runat=\"server\">\n\tvoid Application_Start(object sender, EventArgs e)\n\t{\n\t  // Code that runs on application startup\n\t}\n\tvoid Application_End(object sender, EventArgs e)\n\t{\n\t  //  Code that runs on application shutdown\n\t}\n\tvoid Application_Error(object sender, EventArgs e)\n\t{\n\t  // Code that runs when an unhandled error occurs\n\t}\n\tvoid Session_Start(object sender, EventArgs e)\n\t{\n\t  // Code that runs when a new session is started\n\t}\n\tvoid Session_End(object sender, EventArgs e)\n\t{\n\t}      \n\t</script>\n\nSo how can we add a Global.asax.cs file for a Asp.net Web site project? Let us observer the same in the below steps\n\nStep 1: Right click App_Code -> Add New Item -> Class -> Rename it as Global.cs . Then click on the Add button.\n\nStep 2: In the Global.cs file that got created, decorate it by inheriting the class from System.Web.HttpApplication\n\nSo the Global.asax.cs file will now look like\n\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Web;\n\t\n\tpublic class Global : System.Web.HttpApplication\n\t{\n\t  public Global()\n\t  {\n\t    // TODO: Add constructor logic here\n\t  }\n\t\n\t  protected void Application_Start(object sender, EventArgs e)\n\t  {\n\t  }\n\t        \n\t  protected void Session_Start(object sender, EventArgs e)\n\t  {\n\t  }\n\t\n\t  protected void Session_End(object sender, EventArgs e)\n\t  {\n\t  }\n\t  \n\t  protected void Application_End(object sender, EventArgs e)\n\t  {\n\t  }\n\t}\n\nStep 3: Now, from the Global.asax file, remove the entire script code and change the\n\n\t<%@ Application Language=\"C#\" %>\n\nto\n\n\t<%@ Application Language=\"C#\" CodeBehind=\"~/App_Code/Global.asax.cs\" Inherits=\"Global\" %>\n\nThat's it. Now run the application and it will work\nHope this helps atleast for the newbies. Happy coding.\n"},{"RelFilename":"2013\\09\\install-typescript091.md","Title":"Install TypeScript-0.9.1","CreateTime":"2013-09-06T22:12:59","Content":"\nCompile-on-Save With TypeScript 0.8.2, we've enabled the ability to compile a project when source files in the project are saved, circumventing the usual manual compile step.\n\nDownload TypeScript for Visual Studio 2012 and 2013 http://www.microsoft.com/en-us/download/details.aspx?id=34790\n\nFor this to work, you need to enable the global setting in Tools->Options->Text Editor->TypeScript->Project. Specifically, enable \"Automatically compile TypeScript files which are part of a project\".\n\nNext, you need to make sure your Visual Studio project uses the new TypeScript targets file. You can do this in one of two ways. New projects created with the TypeScript 0.8.2 release will automatically include a link to this targets file (as will the new version of the Windows 8 sample in the samples directory). For projects made with previous versions, you will need to edit the project file by right-clicking the project, selecting \"Unload Project\", right-clicking the project, selecting \"Edit\", and updating the project XML with the following:\n\nFor each TypeScript file in your project, change the build action to 'TypeScriptCompile':\n\n\t<TypeScriptCompile Include=\"app.ts\" />\n\nThen additionally add (or replace if you had an older PreBuild action for TypeScript) the following at the end of your project file to include TypeScript compilation in your project.\n\nFor JavaScript projects (.jsproj):\n\n\t<Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.VisualStudio.$(WMSJSProject).targets\" />\n\t  <PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n\t    <TypeScriptTarget>ES5</TypeScriptTarget>\n\t    <TypeScriptIncludeComments>true</TypeScriptIncludeComments>\n\t    <TypeScriptSourceMap>true</TypeScriptSourceMap>\n\t  </PropertyGroup>\n\t  <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n\t    <TypeScriptTarget>ES5</TypeScriptTarget>\n\t    <TypeScriptIncludeComments>false</TypeScriptIncludeComments>\n\t    <TypeScriptSourceMap>false</TypeScriptSourceMap>\n\t  </PropertyGroup>\n\t  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\" />\n\nFor C#-style projects (.csproj):\n\n\t <PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n\t    <TypeScriptTarget>ES5</TypeScriptTarget>\n\t    <TypeScriptIncludeComments>true</TypeScriptIncludeComments>\n\t    <TypeScriptSourceMap>true</TypeScriptSourceMap>\n\t  </PropertyGroup>\n\t  <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n\t    <TypeScriptTarget>ES5</TypeScriptTarget>\n\t    <TypeScriptIncludeComments>false</TypeScriptIncludeComments>\n\t    <TypeScriptSourceMap>false</TypeScriptSourceMap>\n\t  </PropertyGroup>\n\t  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\TypeScript\\Microsoft.TypeScript.targets\" />\n\nPS:Web Essentials 2012 is a feature of Visual Studio 2012 expansion plug For v3.0: Remove all support for the TypeScript (http://madskristensen.net/post/Web-Essentials-2013-Where-is-the-TypeScript-support.aspx) This was because many of those features were built directly in to Visual Studio 2013 and therefore no longer needed support by Web Essentials.\n\nThe repository for high quality TypeScript type definitions. https://github.com/borisyankov/DefinitelyTyped#readme\n\nUsage: Include a line like this:\n\n\t/// <reference path=\"jquery.d.ts\" />\n\n"},{"RelFilename":"2013\\09\\no-exports-were-found-that-match-the-constraint-contract-name-error.md","Title":"No exports were found that match the constraint contract name error","CreateTime":"2013-09-05T22:12:59","Content":"\nThis morning I faced a problem while creating my Visual Studio 2012 Library Project. It said \"no exports were found that match the constraint contract name\"\n\nI solved this problem by clearing Visual Studio Component Model Cache. Just delete or rename this folder:\n\n>%AppData%\\..\\Local\\Microsoft\\VisualStudio\\11.0\\ComponentModelCache\n\nVisual Studio Express 2012 has different paths. Visual Studio Express\n\n>...\\Users\\{user}\\AppData\\Local\\Microsoft\\WDExpress\\11.0\\ComponentModelCache\n\nWith Visual Studio Express 2012 for Web\n\n>...\\Users\\{user}\\AppData\\Local\\Microsoft\\VWDExpress\\11.0\\ComponentModelCache\n\nWhen I running MyWebSite in .NET 4.0 and I can't get it working.\n\n>HTTP error 500.22-Internal Server Error\n>Detect ASP.NET setting does not apply to integrated Managed pipeline mode.\n\nIf you still need to use the HTTP Module you need to configure it (.NET 4.0 framework) as follows:\n\n\t<system.webServer>\n\t  <modules runAllManagedModulesForAllRequests=\"true\">\n\t    <add name=\"MyModule\" type=\"<<Namespace>>.<<Class>>, <<assembly>>\"/>\n\t  </modules>\n\t  <validation validateIntegratedModeConfiguration=\"false\"/>\n\t</system.webServer>\n\n"},{"RelFilename":"2013\\09\\typescript-syntax.md","Title":"TypeScript Syntax","CreateTime":"2013-09-04T22:12:59","Content":"\nDeclare variables\n\n\tvar i:number = 1;\n\tvar s:string = \"text\";\n\ninterface and class\n\n\tinterface IPersion{\n\t  firtname: string;\n\t  lastname: string;\n\t}\n\t\n\tclass Student implements IPersion{\n\t  firtname: string;\n\t  lastname: string;\n\t  \n\t  constructor(public name: string){\n\t    this.firstname = name;\n\t    this.lastname = \"Student\";\n\t  }\n\t  sayName()\n\t  {\n\t    return \"Student\";\n\t  }\n\t}\n\t\n\tclass Teacher extends Student{\n\t  constructor()\n\t  {\n\t    super(\"Flash\");\n\t    this.lastname = \"Teacher\";\n\t  }\n\t\n\t  sayName()\n\t  {\n\t    return \"Teacher\";\n\t  }\n\t}\n\nstatic method\n\n\tclass utils{\n\t  public static CopyProperties(source: any, target: any): void {\n\t    for (var prop in source) {\n\t      if (target[prop] !== undefined) {\n\t        target[prop] = source[prop];\n\t      }\n\t      else {\n\t        console.error(\"Cannot set undefined property: \" + prop);\n\t      }\n\t    }\n\t  }\n\t}\n\n\tutils.CopyProperties(source, dest);\n\ncreate module in math.ts\n\n\tmodule math{\n\t        export function MathAdd(a:number, b:number)\n\t        {\n\t                return a+b;\n\t        }\n\t}\n\nuse math module in test.ts\n\n\t/// <reference path=\"math.ts\" />\n\tvar c:number = math.MathAdd(1, 2);\n\ncreate module in file1.ts\n\n\texport function MathAdd(a:number, b:number)\n\t{\n\t  return a+b;\n\t}\n\nuse file1 file module in test.ts\n\n\timport f1 = module('file1')\n\tvar c:number = f1.MathAdd(1, 2);\n\n"},{"RelFilename":"2013\\08\\whats-the-thing-in-net-version.md","Title":"What's the thing in .net version?","CreateTime":"2013-08-26T12:39:01.075","Content":"\n\n|Visual Studio|.NET\t\t\t\t\t\t\t\t|MVC        |EF  |Released     |\n|--\t\t      |:--\t\t\t\t\t\t\t\t|--         |--  |--           |\n|VS2002       |1.0\t\t\t\t\t\t\t\t|N/A        |N/A |January 2002 |\n|VS2003\t      |1.1\t\t\t\t\t\t\t\t|N/A        |N/A |April 2003   |\n|VS2005       |2.0\t\t\t\t\t\t\t\t|N/A        |N/A |November 2005|\n|VS2008       |2.0,3.0,3.5\t\t\t\t\t\t|N/A        |N/A |November 2007|\n|VS2008SP1    |2.0,3.0,3.5SP1\t\t\t\t\t|Add-in 1.0 |Yes |August 2008  |\n|VS2010SP1    |2.0,3.0,3.5,4.0\t\t\t\t\t|2.0,3.0    |Yes |April 2010   |\n|VS2010SP1    |2.0,3.0,3.5SP1,4.0\t\t\t\t|2.0,3.0    |Yes |March 2011   |\n|VS2012       |2.0,3.0,3.5,4.0,4.5\t\t\t\t|3.0,4.0    |Yes |August 2012  |\n|VS2012SP2    |2.0,3.0,3.5,4.0,4.5\t\t\t\t|3.0,4.0    |Yes |April 2013   |\n|VS2012SP3    |2.0,3.0,3.5,4.0,4.5\t\t\t\t|3.0,4.0    |Yes |June 2013    |\n|VS2013\t      |2.0,3.0,3.5,4.0,4.5.1\t\t\t|4.0        |Yes |October 2013 |\n|VS2015\t      |2.0,3.0,3.5,4.0,4.5.1,4.5.2,4.6\t|\t\t\t|Yes | |\n\nVS2010SP1: When you have SP1 installed you'll see instead: Microsoft Visual Studio 2010 Version 10.0.40219.1 SP1Rel Microsoft .NET Framework Version 4.0.30319 SP1Rel\n\nVS2012SP2: Add Fakes Framework that is the next generation of Moles & Stubs. (http://research.microsoft.com/en-us/projects/moles/) Fakes is different from Moles, however, so moving from Moles to Fakes will require some modifications to your code. The Moles framework will not be supported in Visual Studio 2012.\n\n|C# \t|.NET\t|CLR\t|MVC    |Razor\t|Not support OS\n|--     |--\t\t|--\t\t|--     |--\t\t|--\n|C# 1.0 |1.0\t|1.0\t|N/A    |N/A\t|\n|C# 1.2 |1.1\t|1.1\t|N/A    |N/A\t|\n|C# 2.0 |2.0\t|2.0\t|MVC1   |N/A\t|\n|C# 3.0 |3.5\t|2.0\t|MVC2   |N/A\t|\n|C# 4.0 |4.0\t|4.0\t|MVC3,4\t|Razor\t|\n|C# 5.0 |4.5\t|4.0\t|MVC4   | \t\t|XP,2003\n|\t\t|4.5.1\t|4.0\t|\t\t| \t\t|\n|\t\t|4.5.2\t|4.0\t|\t\t| \t\t|\n\nC# 1.2 Features: First version to call Dispose on IEnumerators which implemented IDisposable\n\nC# 2.0 Features: Generics, anonymous methods, nullable types\n\nC# 3.0 Features: Lambda expressions, extension methods, expression trees, implicit type(var), query expressions\n\nC# 4.0 Features: Late binding(dynamic), named arguments and optional\n\nC# 5.0 Features: Async programming, caller info attributes\n\n|VS.NET |Path\n|--     |--\n|VS2008 |\"C:\\Program Files\\Microsoft Visual Studio 9.0\"\n|VS2010 |\"C:\\Program Files\\Microsoft Visual Studio 10.0\"\n|VS2012 |\"C:\\Program Files\\Microsoft Visual Studio 11.0\"\n|VS2013 |\"C:\\Program Files\\Microsoft Visual Studio 12.0\"\n\n\nThere are some known issues using EF 4.x in a .NET 4.5 project.\nWe recommend installing a pre-release version of EF 5, which is designed to work with .NET 4.5\n\nUpdate: 2015.03.15"},{"RelFilename":"2013\\08\\microsoftvisualstudioshellinteropdll-error.md","Title":"Microsoft.VisualStudio.Shell.Interop.dll ERROR","CreateTime":"2013-08-19T22:12:59","Content":"\nVS 2008, COM interop, and Microsoft.VisualStudio.Shell.Interop.dll\n\nWhen I try to compile our VsPackages with VS 2008 the compilation fails. The compilation fails with the message:\n\n>The assembly 'Microsoft.VisualStudio.Shell.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' \nis not registered for COM Interop. Please register it with regasm.exe /tlb.\n\nThis is a known bug that was discovered right as VS2008 was going out the door. Microsoft have a fix in place (to be delivered with VS 2008 SP1)\n\n>https://connect.microsoft.com/VisualStudio/Downloads/DownloadDetails.aspx?DownloadID=10671\n"},{"RelFilename":"2013\\08\\dir-file-whose-file-size-is-greater-than-1024kb.md","Title":"dir file whose File size is greater than 1024KB","CreateTime":"2013-08-19T22:12:59","Content":"\nPowershell: dir file whose File size is greater than 1024KB\n\nThe following example perform is will list the files with .pdf extensions. where-object will filter the result set to files with length greater than 1MB. format-table will format the final output to display only the name of the file\n\nls *.pdf -Recurse | where-object {$_.length -gt 1048576} | format-table -property Name\n\n"},{"RelFilename":"2013\\08\\c-50-callermembername.md","Title":"C# 5.0 CallerMemberName ","CreateTime":"2013-08-18T22:12:59","Content":"\nMy new favorite C# language feature: CallerMemberName \n\nThis is how a property with INotifyPropertyChanged support looks like pre C# 4.5: \n\n\tpublic string OldStylePropertyChanged\n\t{\n\t  get { return _oldStyle; }\n\t  set\n\t  {\n\t    if (value != _oldStyle)\n\t    {\n\t      _oldStyle = value;\n\t      OnPropertyChangedOldStyle(\"OldStylePropertyChanged\");\n\t    }\n\t  }\n\t}\n\tprivate void OnPropertyChangedOldStyle(string propertyName)\n\t{\n\t  var handler = PropertyChanged;\n\t  if (handler != null)\n\t  {\n\t    handler(this, new PropertyChangedEventArgs(propertyName));\n\t  }\n\t}\n\t\nAnd this is how it will look like when we apply the use of CallerMemberName in our PropertyChanged method: \n\n\tpublic string DynamicTitle\n\t{\n\t  get { return _dynamicTitle; }\n\t  set\n\t  {\n\t    if (value != _dynamicTitle)\n\t    {\n\t      _dynamicTitle = value;\n\t      OnPropertyChanged();\n\t    }\n\t  }\n\t}\n\tprivate void OnPropertyChanged([CallerMemberName] string propertyName = null)\n\t{\n\t  var handler = PropertyChanged;\n\t  if (handler != null)\n\t  {\n\t    handler(this, new PropertyChangedEventArgs(propertyName));\n\t  }\n\t}\n\nSome more really cool additions to CallerMemberName is the following Parameter attributes: \n\n*\t[CallerMemberName]\n*\t[CallerFilePath]\n*\t[CallerLineNumber]\n\nThe name of the attributes is straight forward and easy to understand, so I doubt that I would have to describe them in detail, instead, let's look at an example straight from MSDN on how to use them. \n\n\tpublic sealed class Logger\n\t{\n\t  public void TraceMessage(string message,\n\t       [CallerMemberName] string memberName = \"\",\n\t       [CallerFilePath] string sourceFilePath = \"\",\n\t       [CallerLineNumber] int sourceLineNumber = 0)\n\t  {\n\t    Debug.WriteLine(\"message: \" + message);\n\t    Debug.WriteLine(\"member name: \" + memberName);\n\t    Debug.WriteLine(\"source file path: \" + sourceFilePath);\n\t    Debug.WriteLine(\"source line number: \" + sourceLineNumber);\n\t  }\n\t}\n\nHappy hacking!"},{"RelFilename":"2013\\07\\resolving-dependent-net-assembly-version-conflicts.md","Title":"Resolving Dependent .NET Assembly Version Conflicts","CreateTime":"2013-07-28T22:12:59","Content":"\nI ran into an interesting error message this morning while run application.\n\n>------ Build started: Project: UnitTests, Configuration: Debug Any CPU ------\n>Consider app.config remapping of assembly \"yourAssembly, Culture=neutral, PublicKeyToken=xxx\" \nfrom Version \"2.2.0.0\" [] to Version \"2.2.8.0\" \n[C:\\Demo\\yourAssembly.dll] to solve conflict and get rid of warning.\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\Microsoft.Common.targets : \nwarning MSB3247: Found conflicts between different versions of the same dependent assembly.\n\nThis occurs because YourApp depends on a different version of the your Assembly.\n\nFortunately, the error message gives you all you need to know to fix the problem. I added an App.config file to the project with the following XML.\n\n\t<?xml version=\"1.0\"?>\n\t<configuration>\n\t  <runtime>\n\t    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n\t      <dependentAssembly>\n\t        <assemblyIdentity name=\"myAssembly\" publicKeyToken=\"96D09A1EB7F44A77\" culture=\"neutral\"/>\n\t        <bindingRedirect oldVersion=\"0.0.0.0-2.2.8.0\" newVersion=\"2.2.8.0\"/>\n\t      </dependentAssembly>\n\t    </assemblyBinding>\n\t  </runtime>\n\t</configuration> \n\nHow to find public key token for a .NET DLL or assembly?\n\nUse the following command,\n\n>sn -T myDLL.dll\n\nThis will give you the public key token. Remember one thing this only works if the assembly has to be strongly signed.\n\nExample\n\n\tC:\\WINNT\\Microsoft.NET\\Framework\\v3.5>sn -T myDll.dll\n\tMicrosoft (R) .NET Framework Strong Name Utility  Version 3.5.21022.8\n\tCopyright (c) Microsoft Corporation.  All rights reserved.\n\n\tPublic key token is x77x5x561934x089\n\n"},{"RelFilename":"2013\\06\\how-to-redirect-to-a-specific-version-of-net-assembly-at-runtime.md","Title":"How to redirect to a specific version of .net assembly at runtime?","CreateTime":"2013-06-05T22:12:59","Content":"\nWe can redirect to a specific version of a .net assembly by using configuration file as below:\n\n```xml\n<configuration>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"myAssembly\"\n          publicKeyToken=\"32ab4ba45e0a69a1\"\n          culture=\"en-us\" />\n        <!-- Assembly versions can be redirected in application, \n          publisher policy, or machine configuration files. -->\n        <bindingRedirect oldVersion=\"1.0.0.0\" newVersion=\"2.0.0.0\" />\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>\n</configuration>\n```"},{"RelFilename":"2013\\06\\how-to-move-windows-that-open-up-offscreen.md","Title":"How to move windows that open up offscreen?","CreateTime":"2013-06-03T22:12:59","Content":"\n1.\tPress *ALT* + *SPACE* to bring up the system menu (you won't see it because it is off screen) \n2.\tPress *M* to select the \"Move\" menu choice.\n3.\tPress one of the arrow keys to initiate the movement.\n\nNow just use the mouse to place the window where you want.\n\nIn fact, as long as we remember a few shortcuts, you can easily solve this small problem:\n\n「Shift」＋「Win」＋ Left/Right Arrow: You can work around the screen to quickly switch windows.\n\n 「Alt」＋ Space ＋「M」:  Can move the cursor quickly \"stick\" to the currently displayed warning window,  when you move the mouse,  you can drag the window to the front of the visible screen.\n"},{"RelFilename":"2010\\07\\vmware-bridged-network-stops-working-after-sleephibernate-on-windows-host.md","Title":"VMware Bridged Network stops working after sleep/hibernate on Windows Host.","CreateTime":"2010-07-10T10:12:59","Content":"\nRunning VMware Workstation 6.5 (or above 6.5). My Bridged networking stops working after Windows sleeps or hibernates. A restart is required to restore its operation. NAT networking works fine.\nAnyone have any ideas how to restore it without a reboot?\n\nPlease run the following two commands in a cmd as administrator:\n\n\tnet stop vmnetbridge\n\tnet start vmnetbridge"},{"RelFilename":"2010\\06\\multiline-plsql-command-with-net-oraclecommand.md","Title":"Multi-line PL/SQL command with .NET OracleCommand","CreateTime":"2010-06-19T10:12:59","Content":"\nI'm using System.Data.OracleClient.OracleCommand to create a table and fill it out with some data. The query I am using runs OK in PS/SQL Developer, however when I'm trying to execute it from within .NET application I'm getting this error:\n\n>ORA-06550: line 1, column 20:\nPLS-00103: Encountered the symbol \"\" when expecting one of the following:\n>\n>begin function package pragma procedure subtype type use form current cursor\n\nHere is some code:\n\n\tvar text = @\"declare cnt number;\n\tbegin\n\t\n\tselect count(*) into cnt from all_tables\n\twhere table_name = 'TABLE_A';\n\t\n\t\n\tif cnt = 1 then\n\tbegin \n\texecute immediate 'truncate table TABLE_A';\n\texecute immediate 'drop table TABLE_A';\n\tend;\n\tend if;\n\t\n\texecute immediate 'create table TABLE_A as \n\t(SELECT DISTINCT v.ID, g.ext_id FROM VIEW_A v\n\tJOIN TABLE_B B ON v.id = B.Id\n\tWHERE YEAR1 = ''2008'')';\n\t\n\tend;\");\n\tcmd.CommandText = text;\n\tcmd.ExecuteNonQuery();\n\nSearch Google, finally found:\nI think you need to lose just the '\\r' characters.\n\n\ttext = text.Replace(\"\\r\\n\", \"\\n\");\n\tcmd.CommandText = text;\n\tcmd.ExecuteNonQuery();"},{"RelFilename":"2010\\01\\how-to-make-tsql-to-filter-criteria-is-casesensitive.md","Title":"How to make T-SQL to filter criteria is case-sensitive?","CreateTime":"2010-01-24T10:12:59","Content":"\nBasically, add more \"Collate SQL_Latin1_General_CP1_CI_AS\" in after the conditions, it should be followed would be a case-sensitive.\n\n\tSELECT *\n\tFROM dbo.CaseSensitiveTest\n\tWHERE Value1 LIKE '%Test%' Collate SQL_Latin1_General_CP1_CI_AS\n\tGO"},{"RelFilename":"2009\\01\\copy-vdi-file-of-virtualbox.md","Title":"Copy vdi file of Virtualbox","CreateTime":"2009-01-15T10:12:59","Content":"\nVirtualBox often used to test the system, but the most troublesome is that VirtualBox to use uuid to control vdi file, so there is no way to use copy commands to copy vdi file.\n\nTherefore, if you want to copy a vdi file, you must use the following command to re-generate a new uuid.\n\n\tVBoxManage clonevdi Orig.vdi New.vdi\n\nIf you copy the exhausted only to find, there are still commands can be remedied.\n\n\tVBoxManage internalcommands setvdiuuid New.vdi"},{"RelFilename":"2008\\12\\dynamic-linq-to-object.md","Title":"Dynamic Linq To Object","CreateTime":"2008-12-08T10:12:59","Content":"\n\nQ: I need to filter a generic list with a dynamic query:\n\n\tList<string> l; \n\tvar x = l.Where(*dynamic query*)\n\nHow would i do this using LINQ?\nbut it appears to not work with objects that use IEnumerable(generic lists included).\nCan anyone offer any ideas?\n\nAnswers\n>Assuming you mean a string-based query: the dynamic LINQ library will work fine; just call .AsQueryable() first:\n\n\n\tstring s = *dynamic query*\n\tvar qry = l.AsQueryable()."},{"RelFilename":"2008\\09\\dataconfig-class.md","Title":"DataConfig Class","CreateTime":"2008-09-15T10:12:59","Content":"\n\nIntroduction\nEach database connection parameters set different. DataConfig so you can easily set these parameters.\n\nAssembly:T1.Data.dll\nNamespace:T1.Data\n\nDataConfig Properties:\n\n*\tProviderType ProviderType\n*\tstring Server\n*\tstring Database\n*\tstring LoginId\n*\tstring Password\n\n\nThrough the above property setting, you can easily export a variety of different database connection string.\nUsing the code:\n\n\tDataConfig cfg = new DataConfig();\n\tcfg.ProviderType = ProviderType.SqlServer;\n\tcfg.Server = \"172.0.0.1\";\n\tcfg.Database = \"Northwind\";\n\tcfg.LoginId = \"sa\";\n\tcfg.Password = \"123\";\n\tconsole.WriteLine(cfg.ConnectString);\n\n\nIf you wish change to Oracle...\n\n\tcfg.ProviderType = ProviderType.Oracle;\n\tconsole.WriteLine(cfg.ConnectString);\n\nEven if you wish change to SqlExpress...\n\n\tcfg.ProviderType = ProviderType.SqlExpress;\n\tconsole.WriteLine(cfg.ConnectString);\n\nIn addition you can also simplify the traditional connection string in app.Config file.\n\n<add name=\"db1\" connectionString=\"Data Source=172.0.0.1;Network Library=DBMSSOCN;Initial Catalog=Northwind;User ID=sa;Password=123\"></add>\n\n\nChange to...\n\n```xml\n<add name=\"db1\" connectionString=\"ProviderType=SqlServer;Server=172.0.0.1;Database=Northwind;User ID=sa;Password=123\"></add>\n```\n\nIf you wish change to Oracle connection string...\n\n```xml\n<add name=\"db1\" connectionString=\"ProviderType=Oracle;Server=172.0.0.1;Database=Northwind;User ID=sa;Password=123\"></add>\n```\n\nWith DataConfig, you do not have to remember some special database connection parameters."},{"RelFilename":"2008\\09\\dynamicproperty-class.md","Title":"DynamicProperty Class","CreateTime":"2008-09-05T10:12:59","Content":"\nIntroduction\nSome programming tasks require dynamic nature of properties exposed by an object. E.g. it might be needed to access object property by a given key, it might be needed to get all object properties and iterate over them. Dynamic properties are useful when you need to manage them at runtime, when your object is already instantiated. \n\nIn this article we are going to create simple implementation of dynamic properties using C# programming language. We'll use generics for our dynamic properties to make the implementation more flexible and to avoid boxing operations when value types are used for underlying property values.\n\n*\tAssembly:T1.dll\n*\tNamespace:T1.Common\n\nUsing the code \n\n\tMyClass c1 = new MyClass();\n\tc1.Name = \"123\";\n\tint i = c1.ID;\n\nUsing .NET Invoke Method \n\n\tMyClass c1 = new MyClass();\n\tPropertyInfo pi = c1.GetProperty(\"Name\");\n\tpi.SetValue(c1, \"123\");\n\tpi = c1.GetProperty(\"ID\");\n\tint i = (int)pi.GetValue(c1, null);\n\nUsing DynamicProperty Method \n\n\tMyClass c1 = new MyClass();\n\tvar setName = DynamicProperty.SetProperty(\"Name\");\n\tsetName(c1, \"123\");\n\tvar getID = DynamicProperty.GetProperty(\"ID\");\n\tint i = getID(c1);\n\nDynamicProperty Method is fast than Invoke Method.\n"},{"RelFilename":"2008\\09\\valuehelper-class.md","Title":"ValueHelper Class","CreateTime":"2008-09-01T10:12:59","Content":"\nIntroduction\nIf you want to clone the same object of class, you must inherit \"ICloneable\" interface and implement Clone() method for clone function. Now only through ValueHelper Class can be simple to complete this goal.\n\n*\tAssembly:T1.dll\n*\tNamespace:T1.Common\n\nUsing the code:\n\n\tMyClass a = new MyClass();\n\ta.Id = 123;\n\ta.Name = \"abc\";\n\tMyClass b = new MyClass();\n\tb.Id = a.Id;\n\tb.Name = a.Name;\n\tConsole.WriteLine(\"b Id={0} Name={1}\", b.Id, b.Name);\n\nAnd the following code in the same\n\n\tMyClass a = new MyClass();\n\ta.Id = 123;\n\ta.Name = \"abc\";\n\tMyClass b = new MyClass();\n\tValueHelper.CopyData(a, b);\n\tConsole.WriteLine(\"b Id={0} Name={1}\", b.Id, b.Name);\n\nYou can also use Property.GetValue/SetValue to achieve the same purpose, but ValueHelper.CopyData performance on faster than the Property.GetValue/SetValue.\n\nValueHelper Class copy only int/float/string... basic types of variables, do not copy the object type variable.\n\nTherefore, the following code to try to copy the a.Item object will be skipped.\n\n\tclass MyClass1\n\t{\n\t\tpublic string ID{get; set;}\n\t}\n\t\n\tclass MyClass2\n\t{\n\t\tpublic string Name{get; set;}\n\t\tpublic MyClass1 Item{get; set;}\n\t}\n\t\n\tMyClass2 a = new MyClass2();\n\ta.Name = \"abc\";\n\ta.Item = new MyClass1();\n\ta.ID = \"123\";\n\tMyClass2 b = new MyClass2();\n\tValueHelper.CopyData(a, b); \n\t//b.Item will be null."}]